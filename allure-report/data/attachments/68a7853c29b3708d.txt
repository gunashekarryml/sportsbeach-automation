# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Partner Card Test Suite >> Partner Card - Partners List Validation
- Location: /Users/gunashekar/Automation/SportsBeach/sportsbeachautomation/playwright/specs/web/demo.test.ts:18:7

# Error details

```
Error: locator.waitFor: Target page, context or browser has been closed
Call log:
  - waiting for locator('//*[@id="main-content"]/div[2]/div[4]/div/a/span').first() to be visible

    at /Users/gunashekar/Automation/SportsBeach/sportsbeachautomation/playwright/specs/web/demo.test.ts:28:28
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 | import * as fs from 'fs';
   3 |
   4 | test.describe('Partner Card Test Suite', () => {
   5 |
   6 |   test.beforeEach(async ({ page, baseURL }) => {
   7 |     if (typeof baseURL === 'string') {
   8 |       await page.goto(baseURL);
   9 |     } else {
  10 |       throw new Error('baseURL is not defined or not a string');
  11 |     }
  12 |   });
  13 |
  14 |   test.afterEach(async ({ page }) => {
  15 |     await page.close();
  16 |   });
  17 |
  18 |   test('Partner Card - Partners List Validation', async ({ page }) => {
  19 |
  20 |     // Step 1: Load the data from the testdataall.json file
  21 |     const data = JSON.parse(fs.readFileSync('./playwright/testdata/partnersList.json', 'utf-8')).data;
  22 |
  23 |     // Step 2: Define the XPath locator
  24 |     const locator = '//*[@id="main-content"]/div[2]/div[4]/div/a/span';
  25 |
  26 |     // Step 3: Wait for the elements to be visible and located
  27 |     const elements = page.locator(locator);
> 28 |     await elements.first().waitFor({ state: 'visible' }); // Wait for at least the first element to be visible
     |                            ^ Error: locator.waitFor: Target page, context or browser has been closed
  29 |
  30 |     // Step 4: Get the element count (number of matches)
  31 |     const elementCount = await elements.count();
  32 |     console.log("elementCount==>" + elementCount);
  33 |
  34 |     // Ensure elements were found
  35 |     expect(elementCount).toBeGreaterThan(0); // Assert that elements are present
  36 |
  37 |     // Step 5: Loop through each element to get its inner text
  38 |     for (let i = 0; i < elementCount; i++) {
  39 |       const text = await elements.nth(i).innerText(); // Get the inner text of each element
  40 |
  41 |       console.log("text==>" + text);
  42 |
  43 |       // Step 6: Assert if the text is present in the data list
  44 |       expect(data).toContain(text); // Assert that the inner text is present in the list
  45 |     }
  46 |   });
  47 | });
  48 |
```