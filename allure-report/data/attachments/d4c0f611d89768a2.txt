# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Validate circle appears on hover over social network icons in global footer
- Location: /Users/gunashekar/Automation/SportsBeach/sportsbeachautomation/playwright/specs/web/sportsbeach-demo.test.ts:3:5

# Error details

```
Error: page.goto: net::ERR_CONNECTION_RESET at https://yourwebsite.com/
Call log:
  - navigating to "https://yourwebsite.com/", waiting until "load"

    at /Users/gunashekar/Automation/SportsBeach/sportsbeachautomation/playwright/specs/web/sportsbeach-demo.test.ts:5:14
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 |
   3 | test('Validate circle appears on hover over social network icons in global footer', async ({ page }) => {
   4 |   // Navigate to the page where the global footer with social network icons exists
>  5 |   await page.goto('https://yourwebsite.com'); // Replace with the actual URL
     |              ^ Error: page.goto: net::ERR_CONNECTION_RESET at https://yourwebsite.com/
   6 |   await page.getByRole('button', { name: 'Accept cookies' }).click(); // If you need to accept cookies
   7 |
   8 |   // List of social media links with their corresponding names and selector
   9 |   const socialLinks = [
  10 |     { name: 'Visit Instagram', selector: 'a[aria-label="Visit Instagram"]' },
  11 |     { name: 'Visit X Profile', selector: 'a[aria-label="Visit X Profile"]' },
  12 |     { name: 'Visit LinkedIn', selector: 'a[aria-label="Visit LinkedIn"]' }
  13 |   ];
  14 |
  15 |   // Iterate over each social media link to perform the hover and validate the circle appearance
  16 |   for (const { name, selector } of socialLinks) {
  17 |     // Get the social network icon element
  18 |     const iconLocator = page.locator(selector);
  19 |
  20 |     // 1. Hover over the social network icon
  21 |     await iconLocator.hover();
  22 |
  23 |     // 2. Log the computed styles for debugging
  24 |     const computedStyle = await iconLocator.evaluate((el: HTMLElement) => {
  25 |       return window.getComputedStyle(el);
  26 |     });
  27 |
  28 |     console.log(`Computed styles for "${name}" after hover:`, computedStyle);
  29 |
  30 |     // 3. Check if the circle appears (border-radius and border)
  31 |     const isCircleVisible = computedStyle['border-radius'] === '50%' && computedStyle['border'] !== 'transparent';
  32 |
  33 |     // 4. Assert that the circle is visible after hover
  34 |     expect(isCircleVisible).toBe(true); // Test will fail if the circle is not visible after hover
  35 |
  36 |     console.log(`Circle appears on hover for "${name}": ${isCircleVisible ? 'Yes' : 'No'}`);
  37 |   }
  38 |
  39 |   // Now handle the opening of the new tabs for the social media profiles
  40 |   const [page1, page2, page3] = await Promise.all([
  41 |     page.waitForEvent('popup'),
  42 |     page.waitForEvent('popup'),
  43 |     page.waitForEvent('popup')
  44 |   ]);
  45 |
  46 |   // Perform actions or validations on the new pages (optional)
  47 |   await page.getByRole('link', { name: 'Visit Instagram' }).click();
  48 |   await page.getByRole('link', { name: 'Visit X Profile' }).click();
  49 |   await page.getByRole('link', { name: 'Visit LinkedIn' }).click();
  50 |
  51 |   // Example validation on the newly opened pages (optional)
  52 |   expect(page1).toHaveURL(/instagram.com/);
  53 |   expect(page2).toHaveURL(/twitter.com/); // Assuming X Profile is Twitter
  54 |   expect(page3).toHaveURL(/linkedin.com/);
  55 | });
  56 |
```