# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Partner Card Test Suite >> Partner Card - Partner List Validation
- Location: /Users/gunashekar/Automation/SportsBeach/sportsbeachautomation/playwright/specs/web/sportsbeach-PartnerCard.test.ts:18:7

# Error details

```
Error: expect(received).toBe(expected) // Object.is equality

Expected: 21
Received: 0
    at /Users/gunashekar/Automation/SportsBeach/sportsbeachautomation/playwright/specs/web/sportsbeach-PartnerCard.test.ts:45:24
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 | import * as fs from 'fs';
   3 |
   4 | test.describe('Partner Card Test Suite', () => {
   5 |
   6 |   test.beforeEach(async ({ page, baseURL }) => {
   7 |     if (typeof baseURL === 'string') {
   8 |       await page.goto(baseURL);
   9 |     } else {
  10 |       throw new Error('baseURL is not defined or not a string');
  11 |     }
  12 |   });
  13 |
  14 |   test.afterEach(async ({ page }) => {
  15 |     await page.close();
  16 |   });
  17 |
  18 |   test('Partner Card - Partner List Validation', async ({ page }) => {
  19 |     // Step 1: Load the data from the partnersList.json file
  20 |     const data = JSON.parse(fs.readFileSync('./playwright/testdata/partnersList.json', 'utf-8')).data;
  21 |
  22 |     // Step 2: Define the XPath locator for the partner card list
  23 |     const locator = '//*[@id="main-content"]/div[2]/div[4]/div/a[*]/span';
  24 |
  25 |     // Step 3: Locate the elements matching the XPath
  26 |     const elements = await page.locator(locator);
  27 |
  28 |     // Step 4: Get the inner text of each element and compare it with the data from the JSON file
  29 |     const elementCount = await elements.count();
  30 |     let matchCount = 0; // Variable to keep track of the number of matches
  31 |     const foundTexts: string[] = []; // Array to store the matching texts
  32 |
  33 |     // Capture inner text of all elements and check if they are present in the data list
  34 |     for (let i = 0; i < elementCount; i++) {
  35 |       const text = await elements.nth(i).innerText(); // Get the inner text of each element
  36 |
  37 |       // Step 5: Check if the text is present in the data list
  38 |       if (data.includes(text)) {
  39 |         matchCount++; // Increment the match count if the text is found in the list
  40 |         foundTexts.push(text); // Store the matching text
  41 |       }
  42 |     }
  43 |
  44 |     // Step 6: Assert if the total number of matches is equal to 21 (as specified)
> 45 |     expect(matchCount).toBe(21); // Assert that the number of matches equals 21
     |                        ^ Error: expect(received).toBe(expected) // Object.is equality
  46 |
  47 |     // Optional: Assert that all texts from the locator are found in the data list
  48 |     for (let i = 0; i < elementCount; i++) {
  49 |       const text = await elements.nth(i).innerText(); // Get the inner text of each element
  50 |       expect(data).toContain(text); // Assert that the inner text is present in the list
  51 |     }
  52 |
  53 |     // Log the found texts for debugging purposes (optional)
  54 |     console.log('Found texts:', foundTexts);
  55 |   });
  56 |
  57 | });
  58 |
```