# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Validate that each captured word from locator matches any of the allowed words
- Location: /Users/gunashekar/Automation/SportsBeach/sportsbeachautomation/playwright/specs/web/demo.test.ts:3:5

# Error details

```
Error: locator.waitFor: Error: strict mode violation: locator('//*[@id="main-content"]/div[1]/div[*]/div/div[1]/div/div/div//div[position() = 2 or position() = 4 or position() = 6 or position() = 8]') resolved to 12 elements:
    1) <div class="relative flex h-full w-[180px] shrink-0 items-start justify-center lg:w-[200px]">…</div> aka locator('.rfm-child > div > div:nth-child(2)').first()
    2) <div class="relative flex h-full w-[180px] shrink-0 items-start justify-center lg:w-[200px]">…</div> aka locator('div:nth-child(4)').first()
    3) <div class="relative flex h-full w-[180px] shrink-0 items-start justify-center lg:w-[200px]">…</div> aka locator('div:nth-child(6)').first()
    4) <div class="relative flex h-full w-[180px] shrink-0 items-start justify-center lg:w-[200px]">…</div> aka locator('div:nth-child(8)').first()
    5) <div data-tc="#fff" class="shrink-0 whitespace-nowrap mobile-rigid-square-h1 dt:large-desktop-rigid-square-headers-h2">CANNES</div> aka getByText('CANNES', { exact: true }).first()
    6) <div data-tc="#fff" class="shrink-0 whitespace-nowrap mobile-rigid-square-h1 dt:large-desktop-rigid-square-headers-h2">2024</div> aka getByText('2024', { exact: true }).first()
    7) <div data-tc="#fff" class="shrink-0 whitespace-nowrap mobile-rigid-square-h1 dt:large-desktop-rigid-square-headers-h2">CANNES</div> aka getByText('CANNES', { exact: true }).nth(1)
    8) <div data-tc="#fff" class="shrink-0 whitespace-nowrap mobile-rigid-square-h1 dt:large-desktop-rigid-square-headers-h2">2024</div> aka getByText('2024', { exact: true }).nth(1)
    9) <div data-tc="#fff" class="shrink-0 whitespace-nowrap mobile-rigid-square-h1 dt:large-desktop-rigid-square-headers-h2">SPORT</div> aka locator('div:nth-child(3) > .rfm-marquee-container > div > .rfm-initial-child-container > .rfm-child > div > div:nth-child(2)')
    10) <div data-tc="#fff" class="shrink-0 whitespace-nowrap mobile-rigid-square-h1 dt:large-desktop-rigid-square-headers-h2">BEACH</div> aka locator('div:nth-child(3) > .rfm-marquee-container > div > .rfm-initial-child-container > .rfm-child > div > div:nth-child(4)')
    ...

Call log:
  - waiting for locator('//*[@id="main-content"]/div[1]/div[*]/div/div[1]/div/div/div//div[position() = 2 or position() = 4 or position() = 6 or position() = 8]') to be visible

    at /Users/gunashekar/Automation/SportsBeach/sportsbeachautomation/playwright/specs/web/demo.test.ts:11:17
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 |
   3 | test('Validate that each captured word from locator matches any of the allowed words', async ({ page }) => {
   4 |   // Navigate to the page
   5 |   await page.goto('https://sportbeach-dev.vercel.app/');
   6 |
   7 |   // Define the XPath locator with specific positions (2, 4, 6, 8)
   8 |   const locator = page.locator('//*[@id="main-content"]/div[1]/div[*]/div/div[1]/div/div/div//div[position() = 2 or position() = 4 or position() = 6 or position() = 8]');
   9 |
  10 |   // Wait for the elements to be visible
> 11 |   await locator.waitFor({ state: 'visible' });
     |                 ^ Error: locator.waitFor: Error: strict mode violation: locator('//*[@id="main-content"]/div[1]/div[*]/div/div[1]/div/div/div//div[position() = 2 or position() = 4 or position() = 6 or position() = 8]') resolved to 12 elements:
  12 |
  13 |   // Get the number of elements matching the locator
  14 |   const elementCount = await locator.count();
  15 |
  16 |   // Define the allowed words as a Set for fast lookups
  17 |   const allowedWords = new Set(['BEACH', 'SPORT', 'CANNES', '2024']);
  18 |
  19 |   // Loop through each element and validate the text
  20 |   for (let i = 0; i < elementCount; i++) {
  21 |     // Get the visible text for the current element
  22 |     const textContent = await locator.nth(i).innerText();
  23 |
  24 |     // Trim and split the text content into words, then convert each word to uppercase
  25 |     const textWords = textContent.trim().split(/\s+/).map(word => word.trim().toUpperCase());
  26 |
  27 |     // Log the captured words for debugging
  28 |     console.log(`Captured words from element ${i + 1}:`, textWords);
  29 |
  30 |     // Check if all words in the text match any of the allowed words
  31 |     textWords.forEach(word => {
  32 |       // Compare each word to see if it matches any allowed word
  33 |       expect(allowedWords.has(word)).toBe(true); // Ensure the word is in the allowed words list
  34 |     });
  35 |   }
  36 | });
  37 |
```