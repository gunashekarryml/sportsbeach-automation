# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Partner Card Test Suite >> Validate text and background color for lets partner tab on hovering
- Location: /Users/gunashekar/Automation/SportsBeach/sportsbeachautomation/playwright/specs/web/demo.test.ts:175:8

# Error details

```
Error: locator.evaluate: Target page, context or browser has been closed
Call log:
  - waiting for getByRole('link', { name: 'Let\'s Partner' })

    at /Users/gunashekar/Automation/SportsBeach/sportsbeachautomation/playwright/specs/web/demo.test.ts:188:51
```

# Test source

```ts
   88 |
   89 |   test('Validate social media icon hovering and navigation', async ({ page }) => {
   90 |     
   91 |     const poManager = new POManager(page);
   92 |     const basePage = poManager.getBasePage();
   93 |
   94 |     await basePage.acceptCookies.click();
   95 |
   96 |     // List of social media links with their corresponding names and expected URL patterns
   97 |     const socialLinks = [
   98 |       { name: 'Instagram', expectedUrlPattern: 'instagram.com' },
   99 |       { name: 'XProfile', expectedUrlPattern: 'x.com' }, // Update to match x.com for the new X platform
  100 |       { name: 'LinkedIn', expectedUrlPattern: 'linkedin.com' }
  101 |     ];
  102 |
  103 |     // Create an array to hold the popup pages
  104 |     let popups: any[] = [];
  105 |
  106 |     // Listen for the popups (new tabs)
  107 |     page.on('popup', (popup) => {
  108 |       console.log(`Popup opened: ${popup.url()}`); // Log popup URL for debugging
  109 |       popups.push(popup); // Add the new popup to the array
  110 |     });
  111 |
  112 |     // Iterate over each social media link to perform hover and validate the circle appearance
  113 |     for (const { name, expectedUrlPattern } of socialLinks) {
  114 |       // Get the social network icon element
  115 |       const iconLocator = basePage.openSocialMediaLink(name);
  116 |
  117 |       // 1. Hover over the social network icon
  118 |       await iconLocator.hover();
  119 |
  120 |       // 2. Wait for the hover effect to be fully applied (adjust timeout if needed)
  121 |       await page.waitForTimeout(1000);  // Wait for 1 second to allow animation to finish
  122 |
  123 |       // 3. Check for the CSS changes after hover (border-radius and border)
  124 |       const borderRadius = await iconLocator.evaluate((el: HTMLElement) => {
  125 |         return window.getComputedStyle(el).getPropertyValue('border-radius');
  126 |       });
  127 |
  128 |       const borderColor = await iconLocator.evaluate((el: HTMLElement) => {
  129 |         return window.getComputedStyle(el).getPropertyValue('border-color');
  130 |       });
  131 |
  132 |       console.log(`CSS after hover for "${name}": border-radius: ${borderRadius}, border-color: ${borderColor}`);
  133 |
  134 |       // 4. Assert that the border-radius is a large value (i.e., circular shape) and the border is visible (not transparent)
  135 |       expect(borderRadius).toBe('9999px'); // Checking for large value that indicates a circular shape
  136 |       expect(borderColor).not.toBe('transparent'); // Ensure the border has changed to something visible
  137 |
  138 |       // 5. Log success message
  139 |       console.log(`Circle appears on hover for "${name}": Border radius is ${borderRadius} and border color is ${borderColor}`);
  140 |     }
  141 |
  142 |     // Now, click the social media links to open the new tabs
  143 |     for (const { name } of socialLinks) {
  144 |       console.log(`Clicking the ${name} link to open popup.`);
  145 |       await basePage.openSocialMediaLink(name).click();
  146 |     }
  147 |
  148 |     // Wait a bit to ensure the popups open (you can increase the timeout if necessary)
  149 |     await page.waitForTimeout(5000); // Wait for 5 seconds to ensure popups have time to open
  150 |
  151 |     // Ensure the popups have been captured by checking the number of popups in the array
  152 |     expect(popups.length).toBe(3); // Ensure that 3 popups have been captured
  153 |
  154 |     // Optionally, you can log the URLs of the popups to debug
  155 |     console.log('Captured popups:', popups.map(popup => popup.url()));
  156 |
  157 |     // Ensure the URLs of the popups are correct before proceeding with the assertions
  158 |     for (let i = 0; i < popups.length; i++) {
  159 |       console.log(`Popup URL at index ${i}: ${popups[i].url()}`);
  160 |       await expect(popups[i]).toHaveURL(new RegExp(socialLinks[i].expectedUrlPattern)); // Validate URL with the updated pattern
  161 |     }
  162 |
  163 |     // Optionally, you can also check if the popups have finished loading
  164 |     await Promise.all(popups.map(async (popup, index) => {
  165 |       try {
  166 |         console.log(`Waiting for popup URL at index ${index}: ${popup.url()}`);
  167 |         await popup.waitForLoadState('domcontentloaded', { timeout: 40000 }); // Adjust timeout
  168 |         console.log(`Popup loaded: ${popup.url()}`);
  169 |       } catch (error) {
  170 |         console.error(`Popup at index ${index} failed to load within the timeout: ${error}`);
  171 |       }
  172 |     }));
  173 |   });
  174 |
  175 |   test.only('Validate text and background color for lets partner tab on hovering', async ({ page }) => {
  176 |
  177 |     // Define the locator for the element (e.g., Schedule link)
  178 |     const elementLocator = basePage.letsPartnerButton; // Replace with your actual locator
  179 |
  180 |     // Define the expected colors (adjust these according to your actual values)
  181 |     const expectedTextColorBeforeHover = 'rgb(255, 255, 255)'; // Example: black text color
  182 |     const expectedBackgroundColorBeforeHover = 'rgba(0, 0, 0, 0)'; // Example: white background
  183 |
  184 |     const expectedTextColorAfterHover = 'rgb(0, 82, 125)'; // Example: red text color
  185 |     const expectedBackgroundColorAfterHover = 'rgb(163, 238, 255)'; // Example: green background
  186 |
  187 |     // 1. Check the initial state of the element (before hover)
> 188 |     const initialTextColor = await elementLocator.evaluate((el: HTMLElement) => {
      |                                                   ^ Error: locator.evaluate: Target page, context or browser has been closed
  189 |       const computedStyle = window.getComputedStyle(el);
  190 |       return computedStyle.getPropertyValue('color');
  191 |     });
  192 |     const initialBackgroundColor = await elementLocator.evaluate((el: HTMLElement) => {
  193 |       const computedStyle = window.getComputedStyle(el);
  194 |       return computedStyle.getPropertyValue('background-color');
  195 |     });
  196 |
  197 |     console.log(`Initial text color: ${initialTextColor}`);
  198 |     console.log(`Initial background color: ${initialBackgroundColor}`);
  199 |
  200 |     // Assert the initial colors
  201 |     expect(initialTextColor).toBe(expectedTextColorBeforeHover);
  202 |     expect(initialBackgroundColor).toBe(expectedBackgroundColorBeforeHover);
  203 |
  204 |     // 2. Hover over the element
  205 |     await elementLocator.hover();
  206 |
  207 |     // 3. Check the text color and background color after hover
  208 |     const textColorAfterHover = await elementLocator.evaluate((el: HTMLElement) => {
  209 |       const computedStyle = window.getComputedStyle(el);
  210 |       return computedStyle.getPropertyValue('color');
  211 |     });
  212 |     const backgroundColorAfterHover = await elementLocator.evaluate((el: HTMLElement) => {
  213 |       const computedStyle = window.getComputedStyle(el);
  214 |       return computedStyle.getPropertyValue('background-color');
  215 |     });
  216 |
  217 |     console.log(`Text color after hover: ${textColorAfterHover}`);
  218 |     console.log(`Background color after hover: ${backgroundColorAfterHover}`);
  219 |
  220 |     // 4. Assert that the text color and background color have changed after hover
  221 |     expect(textColorAfterHover).not.toBe(initialTextColor); // Assert text color has changed
  222 |     expect(backgroundColorAfterHover).not.toBe(initialBackgroundColor); // Assert background color has changed
  223 |
  224 |     // 5. Assert the exact expected text and background colors after hover
  225 |     expect(textColorAfterHover).toBe(expectedTextColorAfterHover); // Assert text color is the expected one
  226 |     expect(backgroundColorAfterHover).toBe(expectedBackgroundColorAfterHover); // Assert background color is the expected one
  227 |
  228 |     console.log(`Text color and background color changed and are as expected after hover`);
  229 |   });
  230 |
  231 | });
  232 |
```