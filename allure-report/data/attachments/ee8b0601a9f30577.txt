# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Validate social media icon hovering and navigation
- Location: /Users/gunashekar/Automation/SportsBeach/sportsbeachautomation/playwright/specs/web/demorunner.test.ts:82:5

# Error details

```
Error: locator.hover: Target page, context or browser has been closed
Call log:
  - waiting for locator('a[aria-label="Visit Instagram"]')

    at /Users/gunashekar/Automation/SportsBeach/sportsbeachautomation/playwright/specs/web/demorunner.test.ts:105:23
```

# Test source

```ts
   5 | test.beforeAll(async ({ browser }) => {
   6 |   // This will run before all tests.
   7 |   // Launch the browser and open the page only once.
   8 |   page = await browser.newPage();
   9 |   await page.goto('https://sportbeach-dev.vercel.app/'); // Replace with your actual URL
   10 |   await page.getByRole('button', { name: 'Accept cookies' }).click();
   11 | });
   12 |
   13 | test.beforeEach(async () => {
   14 |   // This will run before each test. Use it to reset the state if needed
   15 |   // Optionally clear cookies or localStorage, etc.
   16 |   console.log('Running setup before each test');
   17 | });
   18 |
   19 | test.afterAll(async () => {
   20 |   // This will run after all tests. Optionally, you can close the page here.
   21 |   await page.close();
   22 | });
   23 |
   24 | test('Validate links in global footer: URL and Status code after click, then navigate back', async () => {
   25 |   // List of links to test by their visible text and expected URL parts
   26 |   const links = [
   27 |     { name: 'Privacy Policy', expectedUrl: 'https://sportbeach-dev.vercel.app/privacy' },
   28 |     { name: 'Terms and Conditions', expectedUrl: 'https://sportbeach-dev.vercel.app/terms' },
   29 |     { name: 'Contact Us', expectedUrl: 'https://www.cnbc.com/video/2023/10/06/why-sports-marketing-is-a-growth-area-a-stagwellas-ceo-mark-penn.html' },
   30 |   ];
   31 |
   32 |   // Iterate over each link and perform the validation
   33 |   for (const { name, expectedUrl } of links) {
   34 |     const elementLocator = page.locator(`text=${name}`);
   35 |
   36 |     // 1. Check the initial state of the element (before hover)
   37 |     const initialTextDecoration = await elementLocator.evaluate((el: HTMLElement) => {
   38 |       const computedStyle = window.getComputedStyle(el);
   39 |       return computedStyle.getPropertyValue('text-decoration');
   40 |     });
   41 |     console.log(`Initial text-decoration for "${name}": ${initialTextDecoration}`);
   42 |
   43 |     // 2. Hover over the element
   44 |     await elementLocator.hover();
   45 |
   46 |     // 3. Check the text-decoration after hover
   47 |     const textDecorationAfterHover = await elementLocator.evaluate((el: HTMLElement) => {
   48 |       const computedStyle = window.getComputedStyle(el);
   49 |       return computedStyle.getPropertyValue('text-decoration');
   50 |     });
   51 |     console.log(`Text-decoration after hover for "${name}": ${textDecorationAfterHover}`);
   52 |
   53 |     // 4. Validate if the element is underlined (check if 'underline' is in the 'text-decoration' value)
   54 |     const isUnderlined = textDecorationAfterHover.includes('underline');
   55 |     expect(isUnderlined).toBe(true); // This will fail the test if not underlined
   56 |     console.log(`Is the "${name}" link underlined on hover? ${isUnderlined ? 'Yes' : 'No'}`);
   57 |
   58 |     // 5. Make an API request to check the status code before clicking the link
   59 |     const response = await page.request.get(expectedUrl);
   60 |     console.log(`Status code for "${name}" before click: ${response.status()}`);
   61 |     expect(response.status()).toBe(200); // Ensure the status code is 200 (OK)
   62 |
   63 |     // 6. Click on the link to navigate to the corresponding page (same tab)
   64 |     await elementLocator.click();
   65 |
   66 |     // 7. Wait for the page to load and validate the URL
   67 |     await page.waitForURL(expectedUrl, { timeout: 10000 }); // Ensures we wait for the full URL to load
   68 |     const currentUrl = page.url();
   69 |     console.log(`URL after clicking "${name}": ${currentUrl}`);
   70 |
   71 |     // 8. Validate the complete URL
   72 |     expect(currentUrl).toBe(expectedUrl); // Ensure the full URL matches the expected URL
   73 |
   74 |     // 9. Navigate back to the original page (since the link opened in the same tab)
   75 |     await page.goBack();
   76 |     await page.waitForLoadState('domcontentloaded'); // Ensure the page is loaded again
   77 |
   78 |     console.log(`Navigated back to the main page after clicking on "${name}".`);
   79 |   }
   80 | });
   81 |
   82 | test('Validate social media icon hovering and navigation', async ({ page }) => {
   83 |   // List of social media links with their corresponding names and selector
   84 |   const socialLinks = [
   85 |     { name: 'Visit Instagram', selector: 'a[aria-label="Visit Instagram"]' },
   86 |     { name: 'Visit X Profile', selector: 'a[aria-label="Visit X Profile"]' },
   87 |     { name: 'Visit LinkedIn', selector: 'a[aria-label="Visit LinkedIn"]' }
   88 |   ];
   89 |
   90 |   // Create an array to hold the popup pages
   91 |   let popups: any[] = [];
   92 |
   93 |   // Listen for the popups (new tabs)
   94 |   page.on('popup', (popup) => {
   95 |     console.log(`Popup opened: ${popup.url()}`); // Log popup URL for debugging
   96 |     popups.push(popup); // Add the new popup to the array
   97 |   });
   98 |
   99 |   // Iterate over each social media link to perform the hover and validate the circle appearance
  100 |   for (const { name, selector } of socialLinks) {
  101 |     // Get the social network icon element
  102 |     const iconLocator = page.locator(selector);
  103 |
  104 |     // 1. Hover over the social network icon
> 105 |     await iconLocator.hover();
      |                       ^ Error: locator.hover: Target page, context or browser has been closed
  106 |
  107 |     // 2. Wait for the hover effect to be fully applied (adjust timeout if needed)
  108 |     await page.waitForTimeout(1000);  // Wait for 1 second to allow animation to finish
  109 |
  110 |     // 3. Check for the CSS changes after hover (border-radius and border)
  111 |     const borderRadius = await iconLocator.evaluate((el: HTMLElement) => {
  112 |       return window.getComputedStyle(el).getPropertyValue('border-radius');
  113 |     });
  114 |
  115 |     const borderColor = await iconLocator.evaluate((el: HTMLElement) => {
  116 |       return window.getComputedStyle(el).getPropertyValue('border-color');
  117 |     });
  118 |
  119 |     console.log(`CSS after hover for "${name}": border-radius: ${borderRadius}, border-color: ${borderColor}`);
  120 |
  121 |     // 4. Assert that the border-radius is a large value (i.e., circular shape) and the border is visible (not transparent)
  122 |     expect(borderRadius).toBe('9999px'); // Checking for large value that indicates a circular shape
  123 |     expect(borderColor).not.toBe('transparent'); // Ensure the border has changed to something visible
  124 |
  125 |     // 5. Log success message
  126 |     console.log(`Circle appears on hover for "${name}": Border radius is ${borderRadius} and border color is ${borderColor}`);
  127 |   }
  128 |
  129 |   // Now, click the social media links to open the new tabs
  130 |   await page.getByRole('link', { name: 'Visit Instagram' }).click();
  131 |   await page.getByRole('link', { name: 'Visit X Profile' }).click();
  132 |   await page.getByRole('link', { name: 'Visit LinkedIn' }).click();
  133 |
  134 |   // Wait a bit to ensure the popups open (you can increase the timeout if necessary)
  135 |   await page.waitForTimeout(2000); // Wait for 2 seconds to ensure popups have time to open
  136 |
  137 |   // Ensure the popups have been captured by checking the number of popups in the array
  138 |   expect(popups.length).toBe(3); // Ensure that 3 popups have been captured
  139 |
  140 |   // Optionally, you can log the URLs of the popups to debug
  141 |   console.log('Captured popups:', popups.map(popup => popup.url()));
  142 |
  143 |   // Ensure the URLs of the popups are correct before proceeding with the assertions
  144 |   for (let i = 0; i < popups.length; i++) {
  145 |     console.log(`Popup URL at index ${i}: ${popups[i].url()}`);
  146 |
  147 |     // Update regular expression to match domain properly (instagram.com, twitter.com, linkedin.com)
  148 |     await expect(popups[i]).toHaveURL(new RegExp(`https?://(www\.)?${socialLinks[i].name.split(' ')[1].toLowerCase()}\.com`)); 
  149 |   }
  150 |
  151 |   // Optionally, you can also check if the popups have finished loading
  152 |   await Promise.all(popups.map(popup => popup.waitForLoadState('load')));
  153 | });
  154 |
  155 |
  156 | test('Validate text and background color for lets partner tab on hovering', async () => {
  157 |   // Define the locator for the element (e.g., Schedule link)
  158 |   const elementLocator = page.getByRole('link', { name: 'Let\'s Partner' }); // Replace with your actual locator
  159 |
  160 |   const expectedTextColorBeforeHover = 'rgb(255, 255, 255)'; // Example: black text color
  161 |   const expectedBackgroundColorBeforeHover = 'rgba(0, 0, 0, 0)'; // Example: white background
  162 |
  163 |   const expectedTextColorAfterHover = 'rgb(0, 82, 125)'; // Example: red text color
  164 |   const expectedBackgroundColorAfterHover = 'rgb(163, 238, 255)'; // Example: green background
  165 |
  166 |   // 1. Check the initial state of the element (before hover)
  167 |   const initialTextColor = await elementLocator.evaluate((el: HTMLElement) => {
  168 |     const computedStyle = window.getComputedStyle(el);
  169 |     return computedStyle.getPropertyValue('color');
  170 |   });
  171 |   const initialBackgroundColor = await elementLocator.evaluate((el: HTMLElement) => {
  172 |     const computedStyle = window.getComputedStyle(el);
  173 |     return computedStyle.getPropertyValue('background-color');
  174 |   });
  175 |
  176 |   console.log(`Initial text color: ${initialTextColor}`);
  177 |   console.log(`Initial background color: ${initialBackgroundColor}`);
  178 |
  179 |   // Assert the initial colors
  180 |   expect(initialTextColor).toBe(expectedTextColorBeforeHover);
  181 |   expect(initialBackgroundColor).toBe(expectedBackgroundColorBeforeHover);
  182 |
  183 |   // 2. Hover over the element
  184 |   await elementLocator.hover();
  185 |
  186 |   // 3. Check the text color and background color after hover
  187 |   const textColorAfterHover = await elementLocator.evaluate((el: HTMLElement) => {
  188 |     const computedStyle = window.getComputedStyle(el);
  189 |     return computedStyle.getPropertyValue('color');
  190 |   });
  191 |   const backgroundColorAfterHover = await elementLocator.evaluate((el: HTMLElement) => {
  192 |     const computedStyle = window.getComputedStyle(el);
  193 |     return computedStyle.getPropertyValue('background-color');
  194 |   });
  195 |
  196 |   console.log(`Text color after hover: ${textColorAfterHover}`);
  197 |   console.log(`Background color after hover: ${backgroundColorAfterHover}`);
  198 |
  199 |   // 4. Assert that the text color and background color have changed after hover
  200 |   expect(textColorAfterHover).not.toBe(initialTextColor); // Assert text color has changed
  201 |   expect(backgroundColorAfterHover).not.toBe(initialBackgroundColor); // Assert background color has changed
  202 |
  203 |   // 5. Assert the exact expected text and background colors after hover
  204 |   expect(textColorAfterHover).toBe(expectedTextColorAfterHover); // Assert text color is the expected one
  205 |   expect(backgroundColorAfterHover).toBe(expectedBackgroundColorAfterHover); // Assert background color is the expected one
```