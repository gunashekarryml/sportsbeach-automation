# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Validate social media icon hovering and navigation1111111
- Location: /Users/gunashekar/Automation/SportsBeach/sportsbeachautomation/playwright/specs/web/demorunner.test.ts:215:5

# Error details

```
Error: locator.hover: Test timeout of 30000ms exceeded.
Call log:
  - waiting for locator('a[aria-label="Visit Instagram"]')

    at /Users/gunashekar/Automation/SportsBeach/sportsbeachautomation/playwright/specs/web/demorunner.test.ts:242:23
```

# Test source

```ts
  142 |     { name: 'Visit LinkedIn', selector: 'a[aria-label="Visit LinkedIn"]', expectedURL: 'https://www.linkedin.com' }
  143 |   ];
  144 |
  145 |   // Create an array to hold the popup pages
  146 |   let popups: any[] = [];
  147 |
  148 |   // Listen for the popups (new tabs)
  149 |   page.on('popup', (popup) => {
  150 |     console.log(`Popup opened: ${popup.url()}`); // Log popup URL for debugging
  151 |     popups.push(popup); // Add the new popup to the array
  152 |   });
  153 |
  154 |   // Iterate over each social media link to perform the hover and validate the circle appearance
  155 |   for (const { name, selector } of socialLinks) {
  156 |     // Get the social network icon element
  157 |     const iconLocator = page.locator(selector);
  158 |
  159 |     // 1. Wait for the element to be visible and interactable
  160 |     await iconLocator.waitFor({ state: 'visible', timeout: 5000 }); // Wait for 5 seconds to make sure it's visible
  161 |
  162 |     // 2. Hover over the social network icon
  163 |     await iconLocator.hover({ timeout: 5000 });  // Increase timeout for hover if necessary
  164 |
  165 |     // 3. Wait for the hover effect to be fully applied (adjust timeout if needed)
  166 |     await page.waitForTimeout(1000); // Wait for 1 second to allow animation to finish
  167 |
  168 |     // 4. Check for the CSS changes after hover (border-radius and border)
  169 |     const borderRadius = await iconLocator.evaluate((el: HTMLElement) => {
  170 |       return window.getComputedStyle(el).getPropertyValue('border-radius');
  171 |     });
  172 |
  173 |     const borderColor = await iconLocator.evaluate((el: HTMLElement) => {
  174 |       return window.getComputedStyle(el).getPropertyValue('border-color');
  175 |     });
  176 |
  177 |     console.log(`CSS after hover for "${name}": border-radius: ${borderRadius}, border-color: ${borderColor}`);
  178 |
  179 |     // 5. Assert that the border-radius is a large value (i.e., circular shape) and the border is visible (not transparent)
  180 |     expect(borderRadius).toBe('9999px'); // Checking for large value that indicates a circular shape
  181 |     expect(borderColor).not.toBe('transparent'); // Ensure the border has changed to something visible
  182 |
  183 |     // 6. Log success message
  184 |     console.log(`Circle appears on hover for "${name}": Border radius is ${borderRadius} and border color is ${borderColor}`);
  185 |   }
  186 |
  187 |   // Now, click the social media links to open the new tabs
  188 |   await page.getByRole('link', { name: 'Visit Instagram' }).click();
  189 |   await page.getByRole('link', { name: 'Visit X Profile' }).click();
  190 |   await page.getByRole('link', { name: 'Visit LinkedIn' }).click();
  191 |
  192 |   // Wait a bit to ensure the popups open (you can increase the timeout if necessary)
  193 |   await page.waitForTimeout(2000); // Wait for 2 seconds to ensure popups have time to open
  194 |
  195 |   // Ensure the popups have been captured by checking the number of popups in the array
  196 |   expect(popups.length).toBe(3); // Ensure that 3 popups have been captured
  197 |
  198 |   // Optionally, you can log the URLs of the popups to debug
  199 |   console.log('Captured popups:', popups.map(popup => popup.url()));
  200 |
  201 |   // Ensure the URLs of the popups are correct before proceeding with the assertions
  202 |   for (let i = 0; i < popups.length; i++) {
  203 |     const popupURL = popups[i].url();
  204 |     console.log(`Popup URL at index ${i}: ${popupURL}`);
  205 |
  206 |     // Validate URL using the full expected URL (including https:// and www if necessary)
  207 |     await expect(popupURL).toMatch(new RegExp(socialLinks[i].expectedURL));
  208 |   }
  209 |
  210 |   // Optionally, you can also check if the popups have finished loading
  211 |   await Promise.all(popups.map(popup => popup.waitForLoadState('load')));
  212 | });
  213 |
  214 |
  215 | test('Validate social media icon hovering and navigation1111111', async ({ page }) => {
  216 |   // Navigate to the page where the global footer with social network icons exists
  217 |   // await page.goto('https://sportbeach-dev.vercel.app/');
  218 |   // await page.getByRole('button', { name: 'Accept cookies' }).click();
  219 |
  220 |   // List of social media links with their corresponding names and selector
  221 |   const socialLinks = [
  222 |     { name: 'Visit Instagram', selector: 'a[aria-label="Visit Instagram"]' },
  223 |     { name: 'Visit X Profile', selector: 'a[aria-label="Visit X Profile"]' },
  224 |     { name: 'Visit LinkedIn', selector: 'a[aria-label="Visit LinkedIn"]' }
  225 |   ];
  226 |
  227 |   // Create an array to hold the popup pages
  228 |   let popups: any[] = [];
  229 |
  230 |   // Listen for the popups (new tabs)
  231 |   page.on('popup', (popup) => {
  232 |     console.log(`Popup opened: ${popup.url()}`); // Log popup URL for debugging
  233 |     popups.push(popup); // Add the new popup to the array
  234 |   });
  235 |
  236 |   // Iterate over each social media link to perform the hover and validate the circle appearance
  237 |   for (const { name, selector } of socialLinks) {
  238 |     // Get the social network icon element
  239 |     const iconLocator = page.locator(selector);
  240 |
  241 |     // 1. Hover over the social network icon
> 242 |     await iconLocator.hover();
      |                       ^ Error: locator.hover: Test timeout of 30000ms exceeded.
  243 |
  244 |     // 2. Wait for the hover effect to be fully applied (adjust timeout if needed)
  245 |     await page.waitForTimeout(1000);  // Wait for 1 second to allow animation to finish
  246 |
  247 |     // 3. Check for the CSS changes after hover (border-radius and border)
  248 |     const borderRadius = await iconLocator.evaluate((el: HTMLElement) => {
  249 |       return window.getComputedStyle(el).getPropertyValue('border-radius');
  250 |     });
  251 |
  252 |     const borderColor = await iconLocator.evaluate((el: HTMLElement) => {
  253 |       return window.getComputedStyle(el).getPropertyValue('border-color');
  254 |     });
  255 |
  256 |     console.log(`CSS after hover for "${name}": border-radius: ${borderRadius}, border-color: ${borderColor}`);
  257 |
  258 |     // 4. Assert that the border-radius is a large value (i.e., circular shape) and the border is visible (not transparent)
  259 |     expect(borderRadius).toBe('9999px'); // Checking for large value that indicates a circular shape
  260 |     expect(borderColor).not.toBe('transparent'); // Ensure the border has changed to something visible
  261 |
  262 |     // 5. Log success message
  263 |     console.log(`Circle appears on hover for "${name}": Border radius is ${borderRadius} and border color is ${borderColor}`);
  264 |   }
  265 |
  266 |   // Now, click the social media links to open the new tabs
  267 |   await page.getByRole('link', { name: 'Visit Instagram' }).click();
  268 |   await page.getByRole('link', { name: 'Visit X Profile' }).click();
  269 |   await page.getByRole('link', { name: 'Visit LinkedIn' }).click();
  270 |
  271 |   // Wait a bit to ensure the popups open (you can increase the timeout if necessary)
  272 |   await page.waitForTimeout(2000); // Wait for 2 seconds to ensure popups have time to open
  273 |
  274 |   // Ensure the popups have been captured by checking the number of popups in the array
  275 |   expect(popups.length).toBe(3); // Ensure that 3 popups have been captured
  276 |
  277 |   // Optionally, you can log the URLs of the popups to debug
  278 |   console.log('Captured popups:', popups.map(popup => popup.url()));
  279 |
  280 |   // Ensure the URLs of the popups are correct before proceeding with the assertions
  281 |   for (let i = 0; i < popups.length; i++) {
  282 |     console.log(`Popup URL at index ${i}: ${popups[i].url()}`);
  283 |     await expect(popups[i]).toHaveURL(new RegExp(`${socialLinks[i].name.split(' ')[1].toLowerCase()}.com`)); // Validate URL (e.g., instagram.com, twitter.com, linkedin.com)
  284 |   }
  285 |
  286 |   // Optionally, you can also check if the popups have finished loading
  287 |   await Promise.all(popups.map(popup => popup.waitForLoadState('load')));
  288 | });
  289 |
  290 |
```