# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Validate links in global footer: URL and Status code after click, then navigate back
- Location: /Users/gunashekar/Automation/SportsBeach/sportsbeachautomation/playwright/specs/web/sportsbeach-demo.test.ts:3:5

# Error details

```
Error: expect(received).toContain(expected) // indexOf

Expected substring: "privacy-policy"
Received string:    "https://sportbeach-dev.vercel.app/privacy"
    at /Users/gunashekar/Automation/SportsBeach/sportsbeachautomation/playwright/specs/web/sportsbeach-demo.test.ts:53:24
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 |
   3 | test('Validate links in global footer: URL and Status code after click, then navigate back', async ({ page }) => {
   4 |   // Navigate to the test page
   5 |   await page.goto('https://sportbeach-dev.vercel.app/'); // Replace with your actual URL
   6 |   await page.getByRole('button', { name: 'Accept cookies' }).click();
   7 |
   8 |   // List of links to test by their visible text and expected URL parts
   9 |   const links = [
  10 |     { name: 'Privacy Policy', expectedUrlPart: 'privacy-policy' },
  11 |     { name: 'Terms and Conditions', expectedUrlPart: 'terms-and-conditions' },
  12 |     { name: 'Contact Us', expectedUrlPart: 'contact-us' },
  13 |   ];
  14 |
  15 |   // Iterate over each link and perform the validation
  16 |   for (const { name, expectedUrlPart } of links) {
  17 |     // Get the element using the visible text
  18 |     const elementLocator = page.locator(`text=${name}`);
  19 |
  20 |     // 1. Check the initial state of the element (before hover)
  21 |     const initialTextDecoration = await elementLocator.evaluate((el: HTMLElement) => {
  22 |       const computedStyle = window.getComputedStyle(el);
  23 |       return computedStyle.getPropertyValue('text-decoration');
  24 |     });
  25 |     console.log(`Initial text-decoration for "${name}": ${initialTextDecoration}`);
  26 |
  27 |     // 2. Hover over the element
  28 |     await elementLocator.hover();
  29 |
  30 |     // 3. Check the text-decoration after hover
  31 |     const textDecorationAfterHover = await elementLocator.evaluate((el: HTMLElement) => {
  32 |       const computedStyle = window.getComputedStyle(el);
  33 |       return computedStyle.getPropertyValue('text-decoration');
  34 |     });
  35 |     console.log(`Text-decoration after hover for "${name}": ${textDecorationAfterHover}`);
  36 |
  37 |     // 4. Validate if the element is underlined (check if 'underline' is in the 'text-decoration' value)
  38 |     const isUnderlined = textDecorationAfterHover.includes('underline');
  39 |     expect(isUnderlined).toBe(true); // This will fail the test if not underlined
  40 |     console.log(`Is the "${name}" link underlined on hover? ${isUnderlined ? 'Yes' : 'No'}`);
  41 |
  42 |     // 5. Click on the link to navigate to the corresponding page (same tab)
  43 |     await elementLocator.click();
  44 |
  45 |     // 6. Wait for the navigation to complete
  46 |     await page.waitForNavigation({ waitUntil: 'domcontentloaded' });
  47 |
  48 |     // 7. Capture the current URL after the navigation
  49 |     const currentUrl = page.url();
  50 |     console.log(`URL after clicking "${name}": ${currentUrl}`);
  51 |
  52 |     // 8. Validate the URL
> 53 |     expect(currentUrl).toContain(expectedUrlPart); // Ensure URL contains the expected part
     |                        ^ Error: expect(received).toContain(expected) // indexOf
  54 |
  55 |     // 9. Validate network response (ensure the status code is 200)
  56 |     const response = await page.waitForResponse((response) => {
  57 |       return response.status() === 200 && response.url().includes(expectedUrlPart);
  58 |     });
  59 |
  60 |     console.log(`Response status for "${name}": ${response.status()}`);
  61 |     expect(response.status()).toBe(200); // Ensure status code is 200 (OK)
  62 |
  63 |     // 10. Navigate back to the original page (since the link opened in the same tab)
  64 |     await page.goBack();
  65 |     await page.waitForLoadState('domcontentloaded'); // Ensure the page is loaded again
  66 |
  67 |     console.log(`Navigated back to the main page after clicking on "${name}".`);
  68 |   }
  69 | });
  70 |
```