# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Validate circle appears on hover over social media icons in global footer
- Location: /Users/gunashekar/Automation/SportsBeach/sportsbeachautomation/playwright/specs/web/sportsbeach-demo.test.ts:3:5

# Error details

```
Error: expect(received).toBe(expected) // Object.is equality

Expected: "50%"
Received: "9999px"
    at /Users/gunashekar/Automation/SportsBeach/sportsbeachautomation/playwright/specs/web/sportsbeach-demo.test.ts:38:26
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 |
   3 | test('Validate circle appears on hover over social media icons in global footer', async ({ page }) => {
   4 |   // Navigate to the page where the global footer with social network icons exists
   5 |   await page.goto('https://sportbeach-dev.vercel.app/'); // Use the provided URL
   6 |   await page.getByRole('button', { name: 'Accept cookies' }).click(); // If needed, click the cookie consent button
   7 |
   8 |   // List of social media links with their corresponding names and selector
   9 |   const socialLinks = [
  10 |     { name: 'Visit Instagram', selector: 'a[aria-label="Visit Instagram"]' },
  11 |     { name: 'Visit X Profile', selector: 'a[aria-label="Visit X Profile"]' },
  12 |     { name: 'Visit LinkedIn', selector: 'a[aria-label="Visit LinkedIn"]' }
  13 |   ];
  14 |
  15 |   // Iterate over each social media link to perform the hover and validate the circle appearance
  16 |   for (const { name, selector } of socialLinks) {
  17 |     // Get the social network icon element
  18 |     const iconLocator = page.locator(selector);
  19 |
  20 |     // 1. Hover over the social network icon
  21 |     await iconLocator.hover();
  22 |
  23 |     // 2. Wait for the hover effect to be fully applied (adjust timeout if needed)
  24 |     await page.waitForTimeout(1000);  // Wait for 1 second to allow animation to finish (adjust timing)
  25 |
  26 |     // 3. Check for the CSS changes after hover (border-radius and border)
  27 |     const borderRadius = await iconLocator.evaluate((el: HTMLElement) => {
  28 |       return window.getComputedStyle(el).getPropertyValue('border-radius');
  29 |     });
  30 |
  31 |     const borderColor = await iconLocator.evaluate((el: HTMLElement) => {
  32 |       return window.getComputedStyle(el).getPropertyValue('border-color');
  33 |     });
  34 |
  35 |     console.log(`CSS after hover for "${name}": border-radius: ${borderRadius}, border-color: ${borderColor}`);
  36 |
  37 |     // 4. Assert that the border-radius is 50% (making it circular) and the border is visible (not transparent)
> 38 |     expect(borderRadius).toBe('50%');
     |                          ^ Error: expect(received).toBe(expected) // Object.is equality
  39 |     expect(borderColor).not.toBe('transparent');
  40 |
  41 |     // 5. Log success message
  42 |     console.log(`Circle appears on hover for "${name}": Border radius is ${borderRadius} and border color is ${borderColor}`);
  43 |   }
  44 |
  45 |   // Handle the opening of the new tabs for the social media profiles
  46 |   const [page1, page2, page3] = await Promise.all([
  47 |     page.waitForEvent('popup'),
  48 |     page.waitForEvent('popup'),
  49 |     page.waitForEvent('popup')
  50 |   ]);
  51 |
  52 |   // Clicking on the social media links to open new tabs
  53 |   await page.getByRole('link', { name: 'Visit Instagram' }).click();
  54 |   await page.getByRole('link', { name: 'Visit X Profile' }).click();
  55 |   await page.getByRole('link', { name: 'Visit LinkedIn' }).click();
  56 |
  57 |   // Example validation on the newly opened pages
  58 |   expect(page1).toHaveURL(/instagram.com/);
  59 |   expect(page2).toHaveURL(/twitter.com/); // Assuming X Profile is Twitter
  60 |   expect(page3).toHaveURL(/linkedin.com/);
  61 | });
  62 |
```