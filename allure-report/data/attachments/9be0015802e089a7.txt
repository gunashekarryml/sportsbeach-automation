# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Validate the logo wall
- Location: /Users/gunashekar/Automation/SportsBeach/sportsbeachautomation/playwright/specs/web/sportsbeach-logoWall.test.ts:17:5

# Error details

```
Error: expect(received).toBe(expected) // Object.is equality

Expected: true
Received: false
    at forEach (/Users/gunashekar/Automation/SportsBeach/sportsbeachautomation/playwright/specs/web/sportsbeach-logoWall.test.ts:54:20)
    at /Users/gunashekar/Automation/SportsBeach/sportsbeachautomation/playwright/specs/web/sportsbeach-logoWall.test.ts:53:21
```

# Test source

```ts
   1 | import { test, expect, Page, APIRequestContext } from '@playwright/test';
   2 |
   3 | async function checkLinkStatus(request: APIRequestContext, url: string): Promise<boolean> {
   4 |   try {
   5 |     // Send a GET request to check if the link is valid (status 200)
   6 |     const response = await request.get(url);
   7 |     
   8 |     // If the status is 200, the link is valid
   9 |     return response.status() === 200;
  10 |   } catch (error) {
  11 |     // If there is an error with the request (e.g., network issue), return false
  12 |     console.error(`Error checking link: ${url}`, error);
  13 |     return false;
  14 |   }
  15 | }
  16 |
  17 | test('Validate the logo wall', async ({ page, request }) => {
  18 |   // Go to the page
  19 |   await page.goto('https://sportbeach-dev.vercel.app/');
  20 |
  21 |   // Select all links within the partner logos section
  22 |   const partnerstLocatorsRow1 = page.locator('//*[@id="main-content"]/section[1]/div/div[2]/div[1]/div[1]/div/div/div/a[*]');
  23 |   const partnersCountRow1 = await partnerstLocatorsRow1.count();
  24 |
  25 |   // Initialize an array to store the results of each link check
  26 |   const linkStatusResults: { url: string; status: boolean }[] = [];
  27 |
  28 |   // Loop through all links and check if they are valid
  29 |   for (let i = 0; i < partnersCountRow1; i++) {
  30 |     const partner = partnerstLocatorsRow1.nth(i); // Get the partner at index i
  31 |     
  32 |     // Capture the 'href' attribute (link) of the partner
  33 |     const link = await partner.getAttribute('href');
  34 |     console.log(link);
  35 |     
  36 |     if (link) {
  37 |       // If the href is not null or undefined, check the link status using the API request
  38 |       const isValid = await checkLinkStatus(request, link);
  39 |       
  40 |       // Store the result in the linkStatusResults array
  41 |       linkStatusResults.push({ url: link, status: isValid });
  42 |
  43 |       // Log the result, but don't immediately fail the test
  44 |       if (isValid) {
  45 |         console.log(`Link ${link} is valid.`);
  46 |       } else {
  47 |         console.error(`Link ${link} is broken or not reachable.`);
  48 |       }
  49 |     }
  50 |   }
  51 |
  52 |   // After all checks, you can assert that all links should be valid
  53 |   linkStatusResults.forEach(({ url, status }) => {
> 54 |     expect(status).toBe(true);  // Assert each link is valid
     |                    ^ Error: expect(received).toBe(expected) // Object.is equality
  55 |     if (!status) {
  56 |       console.error(`Failed to validate the link: ${url}`);
  57 |     }
  58 |   });
  59 | });
  60 |
```