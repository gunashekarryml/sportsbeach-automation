# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Validate that the locator text value contains only specific words
- Location: /Users/gunashekar/Automation/SportsBeach/sportsbeachautomation/playwright/specs/web/sportsbeach-demo.test.ts:3:5

# Error details

```
Error: expect(received).toContain(expected) // indexOf

Expected value: ""
Received array: ["BEACH", "SPORT", "CANNES", "2024"]
    at forEach (/Users/gunashekar/Automation/SportsBeach/sportsbeachautomation/playwright/specs/web/sportsbeach-demo.test.ts:23:28)
    at forEach (/Users/gunashekar/Automation/SportsBeach/sportsbeachautomation/playwright/specs/web/sportsbeach-demo.test.ts:22:15)
    at /Users/gunashekar/Automation/SportsBeach/sportsbeachautomation/playwright/specs/web/sportsbeach-demo.test.ts:17:20
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 |
   3 | test('Validate that the locator text value contains only specific words', async ({ page }) => {
   4 |   // Navigate to the page or component where the locator exists
   5 |   await page.goto('https://sportbeach-dev.vercel.app/');
   6 |
   7 |   // Define the XPath locator with specific positions (2, 4, 6, 8)
   8 |   const locator = page.locator('//*[@id="main-content"]/div[1]/div[*]/div/div[1]/div/div/div//div[position() = 2 or position() = 4 or position() = 6 or position() = 8]');
   9 |
  10 |   // Get all the text content from the matching elements
  11 |   const textContentArray = await locator.allTextContents();
  12 |
  13 |   // Define the allowed words (you can modify the set of words as per your requirement)
  14 |   const allowedWords = ['BEACH', 'SPORT', 'CANNES', '2024'];
  15 |
  16 |   // Loop through each text content and validate it against allowed words
  17 |   textContentArray.forEach((textContent) => {
  18 |     // Trim and split the text content into words
  19 |     const textWords = textContent.trim().split(' ').map(word => word.trim());
  20 |
  21 |     // Ensure every word is in the allowed words list
  22 |     textWords.forEach(word => {
> 23 |       expect(allowedWords).toContain(word); // Check if each word is in the allowed list
     |                            ^ Error: expect(received).toContain(expected) // indexOf
  24 |     });
  25 |   });
  26 |
  27 |   // Optionally, you can validate if any of the specific positions (2, 4, 6, or 8) contains "SPORT"
  28 |   const sportText = textContentArray.find(text => text.includes("SPORT"));
  29 |   expect(sportText).toBeDefined(); // Ensure "SPORT" is present in one of the elements
  30 | });
  31 |
```