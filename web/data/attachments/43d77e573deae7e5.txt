# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Partner Card Test Suite >> Partner Card - Partners List Validation
- Location: /home/runner/work/sportsbeach-automation/sportsbeach-automation/playwright/specs/web/sportsbeach-PartnerCard.test.ts:39:7

# Error details

```
Error: Timed out 5000ms waiting for expect(locator).toBeVisible()

Locator: locator('//*[@id="main-content"]/div[2]/div[4]/div/a[*]').first()
Expected: visible
Received: <element(s) not found>
Call log:
  - expect.toBeVisible with timeout 5000ms
  - waiting for locator('//*[@id="main-content"]/div[2]/div[4]/div/a[*]').first()

    at /home/runner/work/sportsbeach-automation/sportsbeach-automation/playwright/specs/web/sportsbeach-PartnerCard.test.ts:53:36
```

# Test source

```ts
   1 | import { test, expect, APIRequestContext, Page } from '@playwright/test';
   2 | import { POManager } from '../../pageobjects/POManager';
   3 | import * as fs from 'fs';
   4 |
   5 | // Helper function to check link status
   6 | async function checkLinkStatus(request: APIRequestContext, url: string): Promise<boolean> {
   7 |   try {
   8 |     const response = await request.get(url); // Send a GET request to check if the link is valid (status 200)
   9 |     return response.status() === 200; // Return true if status is 200
   10 |   } catch (error) {
   11 |     console.error(`Error checking link: ${url}`, error); // Handle errors (e.g., network issues)
   12 |     return false;
   13 |   }
   14 | }
   15 |
   16 | // Load expected links from JSON file
   17 | function loadExpectedLinks(): string[] {
   18 |   const data = fs.readFileSync('./playwright/testdata/expectedLinks.json', 'utf-8');
   19 |   return JSON.parse(data); // Return the list of expected links
   20 | }
   21 |
   22 | // Function to add a delay between checks
   23 | const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));
   24 |
   25 | test.describe('Partner Card Test Suite', () => {
   26 |
   27 |   test.beforeEach(async ({ page, baseURL }) => {
   28 |     if (typeof baseURL === 'string') {
   29 |       await page.goto(baseURL); // Navigate to the base URL
   30 |     } else {
   31 |       throw new Error('baseURL is not defined or not a string');
   32 |     }
   33 |   });
   34 |
   35 |   test.afterEach(async ({ page }) => {
   36 |     await page.close(); // Close the page after each test
   37 |   });
   38 |
   39 |   test('Partner Card - Partners List Validation', async ({ page }) => {
   40 |     // Load data from partnersList.json
   41 |     const data = JSON.parse(fs.readFileSync('./playwright/testdata/partnersList.json', 'utf-8')).data;
   42 |     const expectedPartnersCount = JSON.parse(fs.readFileSync('./playwright/testdata/partnersList.json', 'utf-8')).expectedPartnersCount;
   43 |
   44 |     // Create page object instances
   45 |     const poManager = new POManager(page);
   46 |     const basePage = poManager.getBasePage();
   47 |     const partnersPage = poManager.getPartnersPage();
   48 |
   49 |     basePage.partnersLink.click(); // Click the partners link
   50 |
   51 |     // Wait for partner name elements to be visible
   52 |     const elements = partnersPage.partnerName;
>  53 |     await expect(elements.first()).toBeVisible();
      |                                    ^ Error: Timed out 5000ms waiting for expect(locator).toBeVisible()
   54 |
   55 |     // Get the element count and ensure the expected number of partners is found
   56 |     const elementCount = await elements.count();
   57 |     expect(elementCount).toEqual(expectedPartnersCount); 
   58 |
   59 |     // Loop through each partner element to validate the text
   60 |     for (let i = 0; i < elementCount; i++) {
   61 |       const text = await elements.nth(i).innerText(); // Get inner text of the partner
   62 |       expect(data).toContain(text); // Assert that the partner is present in the expected data
   63 |     }
   64 |   });
   65 |
   66 |   // New test case to validate partner links and check API status
   67 |   test('Partner Card - Validate Partner Links and Check API Status', async ({ page, request }) => {
   68 |     // Create page object instances
   69 |     const poManager = new POManager(page);
   70 |     const basePage = poManager.getBasePage();
   71 |     const partnersPage = poManager.getPartnersPage();
   72 |
   73 |     basePage.partnersLink.click(); // Click the partners link
   74 |
   75 |     // Define the XPath locator for partner links
   76 |     const elements = partnersPage.partnerName;
   77 |
   78 |     // Wait for partner links to be visible
   79 |     await expect(elements.first()).toBeVisible();
   80 |
   81 |     // Get the element count
   82 |     const elementCount = await elements.count();
   83 |     console.log("Partners Count: " + elementCount);
   84 |
   85 |     // Initialize arrays to store valid and invalid links
   86 |     const validLinks: string[] = [];
   87 |     const invalidLinks: string[] = [];
   88 |
   89 |     // Loop through each element to check the link status
   90 |     for (let i = 0; i < elementCount; i++) {
   91 |       const element = elements.nth(i); // Get partner at index i
   92 |       try {
   93 |         const link = await element.getAttribute('href'); // Get 'href' attribute
   94 |
   95 |         if (link) {
   96 |           console.log(`Checking link: ${link}`);
   97 |
   98 |           // Check the link status using the API request
   99 |           const isValid = await checkLinkStatus(request, link);
  100 |
  101 |           // Store valid or invalid links based on status
  102 |           if (isValid) {
  103 |             validLinks.push(link);
  104 |             console.log(`Link ${link} is valid.`);
  105 |           } else {
  106 |             invalidLinks.push(link);
  107 |             console.error(`Link ${link} is broken or not reachable.`);
  108 |           }
  109 |
  110 |           // Add delay between link checks to avoid overwhelming the server
  111 |           await delay(1000); // Delay 1 second between each link check
  112 |         } else {
  113 |           console.warn(`Link at index ${i} is null or empty.`);
  114 |         }
  115 |       } catch (error) {
  116 |         console.error(`Error checking link at index ${i}:`, error);
  117 |       }
  118 |     }
  119 |
  120 |     // Print results for valid and invalid links
  121 |     console.log("\n--- Summary ---");
  122 |     console.log(`Total Valid Links: ${validLinks.length}`);
  123 |     validLinks.forEach((link, index) => {
  124 |       console.log(`Valid Link ${index + 1}: ${link}`);
  125 |     });
  126 |
  127 |     console.log(`\nTotal Invalid Links: ${invalidLinks.length}`);
  128 |     invalidLinks.forEach((link, index) => {
  129 |       console.error(`Invalid Link ${index + 1}: ${link}`);
  130 |     });
  131 |
  132 |     // Optionally assert that no invalid links are found
  133 |     expect(invalidLinks.length).toBe(0); // Fail the test if there are invalid links
  134 |   });
  135 | });
  136 |
```