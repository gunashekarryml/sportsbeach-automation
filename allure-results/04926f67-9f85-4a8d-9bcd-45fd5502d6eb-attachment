# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Partner Card Test Suite >> Partner Card - Partners List Validation
- Location: /Users/gunashekar/Automation/SportsBeach/sportsbeachautomation/playwright/specs/web/sportsbeach-PartnerCard.test.ts:39:7

# Error details

```
Error: locator.waitFor: Target page, context or browser has been closed
Call log:
  - waiting for locator('//*[@id="main-content"]/div[2]/div[4]/div/a/span').first() to be visible

    at /Users/gunashekar/Automation/SportsBeach/sportsbeachautomation/playwright/specs/web/sportsbeach-PartnerCard.test.ts:55:28
```

# Test source

```ts
   1 | import { test, expect, APIRequestContext, Page } from '@playwright/test';
   2 | import { POManager } from '../../pageobjects/POManager';
   3 | import * as fs from 'fs';
   4 |
   5 | async function checkLinkStatus(request: APIRequestContext, url: string): Promise<boolean> {
   6 |   try {
   7 |     // Send a GET request to check if the link is valid (status 200)
   8 |     const response = await request.get(url);
   9 |
   10 |     // If the status is 200, the link is valid
   11 |     return response.status() === 200;
   12 |   } catch (error) {
   13 |     // If there is an error with the request (e.g., network issue), return false
   14 |     console.error(`Error checking link: ${url}`, error);
   15 |     return false;
   16 |   }
   17 | }
   18 |
   19 | // Load the expected links from the JSON file
   20 | function loadExpectedLinks(): string[] {
   21 |   const data = fs.readFileSync('./playwright/testdata/expectedLinks.json', 'utf-8');
   22 |   return JSON.parse(data);
   23 | }
   24 |
   25 | test.describe('Partner Card Test Suite', () => {
   26 |
   27 |   test.beforeEach(async ({ page, baseURL }) => {
   28 |     if (typeof baseURL === 'string') {
   29 |       await page.goto(baseURL);
   30 |     } else {
   31 |       throw new Error('baseURL is not defined or not a string');
   32 |     }
   33 |   });
   34 |
   35 |   test.afterEach(async ({ page }) => {
   36 |     await page.close();
   37 |   });
   38 |
   39 |   test('Partner Card - Partners List Validation', async ({ page }) => {
   40 |     // Load the data from the testdataall.json file
   41 |     const data = JSON.parse(fs.readFileSync('./playwright/testdata/partnersList.json', 'utf-8')).data;
   42 |     const data1 = JSON.parse(fs.readFileSync('./playwright/testdata/partnersList.json', 'utf-8')).expectedPartnersCount;
   43 |
   44 |     // Create objects to access the page objects
   45 |     const poManager = new POManager(page);
   46 |     const basePage = poManager.getBasePage();
   47 |     const partnersPagePage = poManager.getPartnersPage();
   48 |
   49 |     basePage.partnersLink.click();
   50 |
   51 |     // Define the XPath locator for the partner names (update to correctly target the anchor tags)
   52 |     const elements = partnersPagePage.partnerName;
   53 |
   54 |     // Wait for the elements to be visible and located
>  55 |     await elements.first().waitFor({ state: 'visible' });
      |                            ^ Error: locator.waitFor: Target page, context or browser has been closed
   56 |
   57 |     // Get the element count (number of matches)
   58 |     const elementCount = await elements.count();
   59 |
   60 |     // Ensure elements were found
   61 |     expect(elementCount).toEqual(data1); // Assert that elements are present
   62 |
   63 |     // Loop through each element to get its inner text
   64 |     for (let i = 0; i < elementCount; i++) {
   65 |       const text = await elements.nth(i).innerText(); // Get the inner text of each element
   66 |
   67 |       // Assert if the text is present in the data list
   68 |       expect(data).toContain(text); // Assert that the inner text is present in the list
   69 |     }
   70 |   });
   71 |
   72 |   // // New Test Case: Validate Partner Links and Check API Status
   73 |   // test('Partner Card - Validate Partner Links and Check API Status', async ({ page, request }) => {
   74 |   //   // Create objects to access the page objects
   75 |   //   const poManager = new POManager(page);
   76 |   //   const basePage = poManager.getBasePage();
   77 |   //   const partnersPagePage = poManager.getPartnersPage();
   78 |
   79 |   //   basePage.partnersLink.click();
   80 |
   81 |   //   // Define the XPath locator for the partner names (this should target the correct anchor tags)
   82 |   //   const elements = partnersPagePage.partnerName;
   83 |
   84 |   //   // Wait for the elements to be visible and located
   85 |   //   await elements.first().waitFor({ state: 'visible' });
   86 |
   87 |   //   // Get the element count (number of matches)
   88 |   //   const elementCount = await elements.count();
   89 |
   90 |   //   // Initialize arrays to store valid and invalid links
   91 |   //   const validLinks: string[] = [];
   92 |   //   const invalidLinks: string[] = [];
   93 |
   94 |   //   // Loop through each element to get the link and check its status
   95 |   //   for (let i = 0; i < elementCount; i++) {
   96 |   //     const element = elements.nth(i); // Get the partner at index i
   97 |   //     const link = await element.getAttribute('href'); // Capture the 'href' attribute (link)
   98 |
   99 |   //     if (link) {
  100 |   //       console.log(`Checking link: ${link}`);
  101 |
  102 |   //       // Check the link status using the API request
  103 |   //       const isValid = await checkLinkStatus(request, link);
  104 |
  105 |   //       // Store valid or invalid links based on status
  106 |   //       if (isValid) {
  107 |   //         validLinks.push(link);
  108 |   //         console.log(`Link ${link} is valid.`);
  109 |   //       } else {
  110 |   //         invalidLinks.push(link);
  111 |   //         console.error(`Link ${link} is broken or not reachable.`);
  112 |   //       }
  113 |   //     } else {
  114 |   //       console.warn(`Link at index ${i} is null or empty.`);
  115 |   //     }
  116 |   //   }
  117 |
  118 |   //   // Print the results for valid and invalid links
  119 |   //   console.log("\n--- Summary ---");
  120 |   //   console.log(`Total Valid Links: ${validLinks.length}`);
  121 |   //   validLinks.forEach((link, index) => {
  122 |   //     console.log(`Valid Link ${index + 1}: ${link}`);
  123 |   //   });
  124 |
  125 |   //   console.log(`\nTotal Invalid Links: ${invalidLinks.length}`);
  126 |   //   invalidLinks.forEach((link, index) => {
  127 |   //     console.error(`Invalid Link ${index + 1}: ${link}`);
  128 |   //   });
  129 |
  130 |   //   // Optionally, assert that no links are invalid (to ensure the page is fully working)
  131 |   //   expect(invalidLinks.length).toBe(0); // This will fail the test if there are invalid links
  132 |   // });  
  133 |
  134 |
  135 | });
  136 |
```