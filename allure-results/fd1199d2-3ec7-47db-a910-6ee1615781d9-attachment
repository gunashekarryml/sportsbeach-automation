# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Partner Card Test Suite >> Partner Card - Partners List Validation
- Location: /Users/gunashekar/Automation/SportsBeach/sportsbeachautomation/playwright/specs/web/demo.test.ts:19:7

# Error details

```
Error: expect(received).toContain(expected) // indexOf

Expected value: "72ANDSUNNY"
Received array: ["72andSunny", "Allison", "Allison Larger", "Apollo Jets", "Brand Performance", "CLIO", "Code and Theory", "colle mcvoy", "DONER", "Gatorade", â€¦]
    at /Users/gunashekar/Automation/SportsBeach/sportsbeachautomation/playwright/specs/web/demo.test.ts:52:20
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 | import { POManager } from '../../pageobjects/POManager';
   3 | import * as fs from 'fs';
   4 |
   5 | test.describe('Partner Card Test Suite', () => {
   6 |
   7 |   test.beforeEach(async ({ page, baseURL }) => {
   8 |     if (typeof baseURL === 'string') {
   9 |       await page.goto(baseURL);
  10 |     } else {
  11 |       throw new Error('baseURL is not defined or not a string');
  12 |     }
  13 |   });
  14 |
  15 |   test.afterEach(async ({ page }) => {
  16 |     await page.close();
  17 |   });
  18 |
  19 |   test('Partner Card - Partners List Validation', async ({ page }) => {
  20 |
  21 |     // Step 1: Load the data from the testdataall.json file
  22 |     const data = JSON.parse(fs.readFileSync('./playwright/testdata/partnersList.json', 'utf-8')).data;
  23 |
  24 |     // Step 2 : Create objects to access the page objects
  25 |     const poManager = new POManager(page);
  26 |     const basePage = poManager.getBasePage();
  27 |     const partnersPage = poManager.getPartnersPage();
  28 |
  29 |     basePage.partnersLink.click();
  30 |     
  31 |     // Step 2: Define the XPath locator
  32 |     const locator = '//*[@id="main-content"]/div[2]/div[4]/div/a/span';
  33 |
  34 |     // Step 3: Wait for the elements to be visible and located
  35 |     const elements = page.locator(locator);
  36 |     await elements.first().waitFor({ state: 'visible' }); // Wait for at least the first element to be visible
  37 |
  38 |     // Step 4: Get the element count (number of matches)
  39 |     const elementCount = await elements.count();
  40 |     console.log("elementCount==>" + elementCount);
  41 |
  42 |     // Ensure elements were found
  43 |     expect(elementCount).toBeGreaterThan(0); // Assert that elements are present
  44 |
  45 |     // Step 5: Loop through each element to get its inner text
  46 |     for (let i = 0; i < elementCount; i++) {
  47 |       const text = await elements.nth(i).innerText(); // Get the inner text of each element
  48 |
  49 |       console.log("text==>" + text);
  50 |
  51 |       // Step 6: Assert if the text is present in the data list
> 52 |       expect(data).toContain(text); // Assert that the inner text is present in the list
     |                    ^ Error: expect(received).toContain(expected) // indexOf
  53 |     }
  54 |   });
  55 | });
  56 |
```