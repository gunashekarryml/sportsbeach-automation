# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Partner Card Test Suite >> Validate text and background color for lets partner tab on hovering
- Location: /Users/gunashekar/Automation/SportsBeach/sportsbeachautomation/playwright/specs/web/sportsbeach-globalFooter.test.ts:172:7

# Error details

```
Error: expect(received).toBe(expected) // Object.is equality

Expected: "rgb(0, 82, 125)"
Received: "rgb(255, 255, 255)"
    at /Users/gunashekar/Automation/SportsBeach/sportsbeachautomation/playwright/specs/web/sportsbeach-globalFooter.test.ts:222:33
```

# Test source

```ts
  122 |         return window.getComputedStyle(el).getPropertyValue('border-radius');
  123 |       });
  124 |
  125 |       const borderColor = await iconLocator.evaluate((el: HTMLElement) => {
  126 |         return window.getComputedStyle(el).getPropertyValue('border-color');
  127 |       });
  128 |
  129 |       console.log(`CSS after hover for "${name}": border-radius: ${borderRadius}, border-color: ${borderColor}`);
  130 |
  131 |       // 4. Assert that the border-radius is a large value (i.e., circular shape) and the border is visible (not transparent)
  132 |       expect(borderRadius).toBe('9999px'); // Checking for large value that indicates a circular shape
  133 |       expect(borderColor).not.toBe('transparent'); // Ensure the border has changed to something visible
  134 |
  135 |       // 5. Log success message
  136 |       console.log(`Circle appears on hover for "${name}": Border radius is ${borderRadius} and border color is ${borderColor}`);
  137 |     }
  138 |
  139 |     // Now, click the social media links to open the new tabs
  140 |     for (const { name } of socialLinks) {
  141 |       console.log(`Clicking the ${name} link to open popup.`);
  142 |       await basePage.openSocialMediaLink(name).click();
  143 |     }
  144 |
  145 |     // Wait a bit to ensure the popups open (you can increase the timeout if necessary)
  146 |     await page.waitForTimeout(5000); // Wait for 5 seconds to ensure popups have time to open
  147 |
  148 |     // Ensure the popups have been captured by checking the number of popups in the array
  149 |     expect(popups.length).toBe(3); // Ensure that 3 popups have been captured
  150 |
  151 |     // Optionally, you can log the URLs of the popups to debug
  152 |     console.log('Captured popups:', popups.map(popup => popup.url()));
  153 |
  154 |     // Ensure the URLs of the popups are correct before proceeding with the assertions
  155 |     for (let i = 0; i < popups.length; i++) {
  156 |       console.log(`Popup URL at index ${i}: ${popups[i].url()}`);
  157 |       await expect(popups[i]).toHaveURL(new RegExp(socialLinks[i].expectedUrlPattern)); // Validate URL with the updated pattern
  158 |     }
  159 |
  160 |     // Optionally, you can also check if the popups have finished loading
  161 |     await Promise.all(popups.map(async (popup, index) => {
  162 |       try {
  163 |         console.log(`Waiting for popup URL at index ${index}: ${popup.url()}`);
  164 |         await popup.waitForLoadState('domcontentloaded', { timeout: 40000 }); // Adjust timeout
  165 |         console.log(`Popup loaded: ${popup.url()}`);
  166 |       } catch (error) {
  167 |         console.error(`Popup at index ${index} failed to load within the timeout: ${error}`);
  168 |       }
  169 |     }));
  170 |   });
  171 |
  172 |   test('Validate text and background color for lets partner tab on hovering', async ({ page }) => {
  173 |     await basePage.acceptCookies.click();
  174 |     const elementLocator = basePage.letsPartnerButton;  // Locate by text
  175 |   
  176 |     // Expected colors before and after hover
  177 |     const expectedTextColorBeforeHover = 'rgb(255, 255, 255)';
  178 |     const expectedBackgroundColorBeforeHover = 'rgba(0, 0, 0, 0)';
  179 |     const expectedTextColorAfterHover = 'rgb(0, 82, 125)';
  180 |     const expectedBackgroundColorAfterHover = 'rgb(163, 238, 255)';
  181 |   
  182 |     // Wait until the element is visible
  183 |     await elementLocator.waitFor({ state: 'visible', timeout: 10000 });
  184 |   
  185 |     // Check the initial state of the element (before hover)
  186 |     const initialTextColor = await elementLocator.evaluate((el) => {
  187 |       const computedStyle = window.getComputedStyle(el);
  188 |       return computedStyle.getPropertyValue('color');
  189 |     });
  190 |     const initialBackgroundColor = await elementLocator.evaluate((el) => {
  191 |       const computedStyle = window.getComputedStyle(el);
  192 |       return computedStyle.getPropertyValue('background-color');
  193 |     });
  194 |   
  195 |     console.log(`Initial text color: ${initialTextColor}`);
  196 |     console.log(`Initial background color: ${initialBackgroundColor}`);
  197 |   
  198 |     // Assert initial colors
  199 |     expect(initialTextColor).toBe(expectedTextColorBeforeHover);
  200 |     expect(initialBackgroundColor).toBe(expectedBackgroundColorBeforeHover);
  201 |   
  202 |     // Hover over the element
  203 |     await elementLocator.hover();
  204 |     
  205 |     // Wait for hover effect to settle
  206 |     await page.waitForTimeout(3000);
  207 |   
  208 |     // Check text and background color after hover
  209 |     const textColorAfterHover = await elementLocator.evaluate((el) => {
  210 |       const computedStyle = window.getComputedStyle(el);
  211 |       return computedStyle.getPropertyValue('color');
  212 |     });
  213 |     const backgroundColorAfterHover = await elementLocator.evaluate((el) => {
  214 |       const computedStyle = window.getComputedStyle(el);
  215 |       return computedStyle.getPropertyValue('background-color');
  216 |     });
  217 |   
  218 |     console.log(`Text color after hover: ${textColorAfterHover}`);
  219 |     console.log(`Background color after hover: ${backgroundColorAfterHover}`);
  220 |   
  221 |     // Assert the colors after hover
> 222 |     expect(textColorAfterHover).toBe(expectedTextColorAfterHover);
      |                                 ^ Error: expect(received).toBe(expected) // Object.is equality
  223 |     expect(backgroundColorAfterHover).toBe(expectedBackgroundColorAfterHover);
  224 |   
  225 |     console.log('Text and background colors are correct after hover');
  226 |   });
  227 |
  228 | });
  229 |
```