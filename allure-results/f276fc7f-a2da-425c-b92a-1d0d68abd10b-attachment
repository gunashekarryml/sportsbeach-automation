# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Partner Card Test Suite >> Validate links in global footer: URL and Status code after click, then navigate back
- Location: /Users/gunashekar/Automation/SportsBeach/sportsbeachautomation/playwright/specs/web/sportsbeach-globalFooter.test.ts:26:7

# Error details

```
Error: page.goto: Target page, context or browser has been closed
Call log:
  - navigating to "https://sportbeach-dev.vercel.app/", waiting until "load"

    at /Users/gunashekar/Automation/SportsBeach/sportsbeachautomation/playwright/specs/web/sportsbeach-globalFooter.test.ts:16:18
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 | import { POManager } from '../../pageobjects/POManager';
   3 | import { BasePage } from '../../pageobjects/BasePage';
   4 | import * as fs from 'fs';
   5 |
   6 | test.describe('Partner Card Test Suite', () => {
   7 |   
   8 |   let basePage: BasePage;
   9 |
   10 |   test.beforeEach(async ({ page, baseURL }) => {
   11 |     // Initialize the POManager and BasePage object
   12 |     const poManager = new POManager(page);
   13 |     basePage = poManager.getBasePage();
   14 |
   15 |     if (typeof baseURL === 'string') {
>  16 |       await page.goto(baseURL);
      |                  ^ Error: page.goto: Target page, context or browser has been closed
   17 |     } else {
   18 |       throw new Error('baseURL is not defined or not a string');
   19 |     }
   20 |   });
   21 |
   22 |   test.afterEach(async ({ page }) => {
   23 |     await page.close();
   24 |   });
   25 |
   26 |   test('Validate links in global footer: URL and Status code after click, then navigate back', async ({ page, request }) => {
   27 |     // const poManager = new POManager(page);
   28 |     // const basePage = poManager.getBasePage();
   29 |
   30 |     await basePage.acceptCookies.click();
   31 |
   32 |     // List of links to test by their visible text and expected URL parts
   33 |     const links = [
   34 |       { name: 'Privacy Policy', expectedUrl: 'https://sportbeach-dev.vercel.app/privacy' },
   35 |       { name: 'Terms and Conditions', expectedUrl: 'https://sportbeach-dev.vercel.app/terms' },
   36 |       { name: 'Contact Us', expectedUrl: 'https://www.cnbc.com/video/2023/10/06/why-sports-marketing-is-a-growth-area-a-stagwellas-ceo-mark-penn.html' },
   37 |     ];
   38 |
   39 |     // Iterate over each link and perform the validation
   40 |     for (const { name, expectedUrl } of links) {
   41 |       const elementLocator = page.locator(`text=${name}`);
   42 |
   43 |       // 1. Check the initial state of the element (before hover)
   44 |       const initialTextDecoration = await elementLocator.evaluate((el: HTMLElement) => {
   45 |         const computedStyle = window.getComputedStyle(el);
   46 |         return computedStyle.getPropertyValue('text-decoration');
   47 |       });
   48 |       console.log(`Initial text-decoration for "${name}": ${initialTextDecoration}`);
   49 |
   50 |       // 2. Hover over the element
   51 |       await elementLocator.hover();
   52 |
   53 |       // 3. Check the text-decoration after hover
   54 |       const textDecorationAfterHover = await elementLocator.evaluate((el: HTMLElement) => {
   55 |         const computedStyle = window.getComputedStyle(el);
   56 |         return computedStyle.getPropertyValue('text-decoration');
   57 |       });
   58 |       console.log(`Text-decoration after hover for "${name}": ${textDecorationAfterHover}`);
   59 |
   60 |       // 4. Validate if the element is underlined (check if 'underline' is in the 'text-decoration' value)
   61 |       const isUnderlined = textDecorationAfterHover.includes('underline');
   62 |       expect(isUnderlined).toBe(true); // This will fail the test if not underlined
   63 |       console.log(`Is the "${name}" link underlined on hover? ${isUnderlined ? 'Yes' : 'No'}`);
   64 |
   65 |       // 5. Make an API request to check the status code before clicking the link
   66 |       const response = await request.get(expectedUrl);
   67 |       console.log(`Status code for "${name}" before click: ${response.status()}`);
   68 |       expect(response.status()).toBe(200); // Ensure the status code is 200 (OK)
   69 |
   70 |       // 6. Click on the link to navigate to the corresponding page (same tab)
   71 |       await elementLocator.click();
   72 |
   73 |       // 7. Wait for the page to load and validate the URL
   74 |       await page.waitForURL(expectedUrl, { timeout: 10000 }); // Ensures we wait for the full URL to load
   75 |       const currentUrl = page.url();
   76 |       console.log(`URL after clicking "${name}": ${currentUrl}`);
   77 |
   78 |       // 8. Validate the complete URL
   79 |       expect(currentUrl).toBe(expectedUrl); // Ensure the full URL matches the expected URL
   80 |
   81 |       // 9. Navigate back to the original page (since the link opened in the same tab)
   82 |       await page.goBack();
   83 |       await page.waitForLoadState('domcontentloaded'); // Ensure the page is loaded again
   84 |
   85 |       console.log(`Navigated back to the main page after clicking on "${name}".`);
   86 |     }
   87 |   });
   88 |
   89 |   test('Validate social media icon hovering and navigation', async ({ page }) => {
   90 |
   91 |     await basePage.acceptCookies.click();
   92 |
   93 |     // List of social media links with their corresponding names and expected URL patterns
   94 |     const socialLinks = [
   95 |       { name: 'Instagram', expectedUrlPattern: 'instagram.com' },
   96 |       { name: 'XProfile', expectedUrlPattern: 'x.com' }, // Update to match x.com for the new X platform
   97 |       { name: 'LinkedIn', expectedUrlPattern: 'linkedin.com' }
   98 |     ];
   99 |
  100 |     // Create an array to hold the popup pages
  101 |     let popups: any[] = [];
  102 |
  103 |     // Listen for the popups (new tabs)
  104 |     page.on('popup', (popup) => {
  105 |       console.log(`Popup opened: ${popup.url()}`); // Log popup URL for debugging
  106 |       popups.push(popup); // Add the new popup to the array
  107 |     });
  108 |
  109 |     // Iterate over each social media link to perform hover and validate the circle appearance
  110 |     for (const { name, expectedUrlPattern } of socialLinks) {
  111 |       // Get the social network icon element
  112 |       const iconLocator = basePage.openSocialMediaLink(name);
  113 |
  114 |       // 1. Hover over the social network icon
  115 |       await iconLocator.hover();
  116 |
```