# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Partner Card Test Suite >> Validate social media icon hovering and navigation
- Location: /Users/gunashekar/Automation/SportsBeach/sportsbeachautomation/playwright/specs/web/sportsbeach-globalFooter.test.ts:89:7

# Error details

```
Error: Timed out 5000ms waiting for expect(locator).toHaveURL(expected)

Locator: locator(':root')
Expected pattern: /x.com/
Received string:  "https://www.linkedin.com/"
Call log:
  - expect.toHaveURL with timeout 5000ms
  - waiting for locator(':root')
    9 × locator resolved to <html lang="en">…</html>
      - unexpected value "https://www.linkedin.com/"

    at /Users/gunashekar/Automation/SportsBeach/sportsbeachautomation/playwright/specs/web/sportsbeach-globalFooter.test.ts:157:31
```

# Page snapshot

```yaml
- main:
  - article:
    - img "Instagram"
    - text: Phone number, username, or email
    - textbox "Phone number, username, or email"
    - text: Password
    - textbox "Password"
    - button "Log in" [disabled]
    - text: or
    - button "Log in with Facebook Log in with Facebook":
      - img "Log in with Facebook"
      - text: Log in with Facebook
    - link "Forgot password?"
    - paragraph:
      - text: Don't have an account?
      - link "Sign up"
    - text: Get the app.
    - link "Download on the App Store":
      - img "Download on the App Store"
    - link "Get it on Google Play":
      - img "Get it on Google Play"
- contentinfo:
  - link "Meta"
  - link "About"
  - link "Blog"
  - link "Jobs"
  - link "Help"
  - link "API"
  - link "Privacy"
  - link "Terms"
  - link "Locations"
  - link "Instagram Lite"
  - link "Threads"
  - link "Contact Uploading & Non-Users"
  - link "Meta Verified"
  - text: English
  - img "Down chevron icon"
  - combobox "Switch Display Language":
    - option "Afrikaans"
    - option "العربية"
    - option "Čeština"
    - option "Dansk"
    - option "Deutsch"
    - option "Ελληνικά"
    - option "English" [selected]
    - option "English (UK)"
    - option "Español (España)"
    - option "Español"
    - option "فارسی"
    - option "Suomi"
    - option "Français"
    - option "עברית"
    - option "Bahasa Indonesia"
    - option "Italiano"
    - option "日本語"
    - option "한국어"
    - option "Bahasa Melayu"
    - option "Norsk"
    - option "Nederlands"
    - option "Polski"
    - option "Português (Brasil)"
    - option "Português (Portugal)"
    - option "Русский"
    - option "Svenska"
    - option "ภาษาไทย"
    - option "Filipino"
    - option "Türkçe"
    - option "中文(简体)"
    - option "中文(台灣)"
    - option "বাংলা"
    - option "ગુજરાતી"
    - option "हिन्दी"
    - option "Hrvatski"
    - option "Magyar"
    - option "ಕನ್ನಡ"
    - option "മലയാളം"
    - option "मराठी"
    - option "नेपाली"
    - option "ਪੰਜਾਬੀ"
    - option "සිංහල"
    - option "Slovenčina"
    - option "தமிழ்"
    - option "తెలుగు"
    - option "اردو"
    - option "Tiếng Việt"
    - option "中文(香港)"
    - option "Български"
    - option "Français (Canada)"
    - option "Română"
    - option "Српски"
    - option "Українська"
  - text: © 2025 Instagram from Meta
- button "Close":
  - img "Close"
- text: By continuing, you agree to Instagram's
- link "Terms of Use"
- text: and
- link "Privacy Policy"
- text: .
```

# Test source

```ts
   57 |       });
   58 |       console.log(`Text-decoration after hover for "${name}": ${textDecorationAfterHover}`);
   59 |
   60 |       // 4. Validate if the element is underlined (check if 'underline' is in the 'text-decoration' value)
   61 |       const isUnderlined = textDecorationAfterHover.includes('underline');
   62 |       expect(isUnderlined).toBe(true); // This will fail the test if not underlined
   63 |       console.log(`Is the "${name}" link underlined on hover? ${isUnderlined ? 'Yes' : 'No'}`);
   64 |
   65 |       // 5. Make an API request to check the status code before clicking the link
   66 |       const response = await request.get(expectedUrl);
   67 |       console.log(`Status code for "${name}" before click: ${response.status()}`);
   68 |       expect(response.status()).toBe(200); // Ensure the status code is 200 (OK)
   69 |
   70 |       // 6. Click on the link to navigate to the corresponding page (same tab)
   71 |       await elementLocator.click();
   72 |
   73 |       // 7. Wait for the page to load and validate the URL
   74 |       await page.waitForURL(expectedUrl, { timeout: 10000 }); // Ensures we wait for the full URL to load
   75 |       const currentUrl = page.url();
   76 |       console.log(`URL after clicking "${name}": ${currentUrl}`);
   77 |
   78 |       // 8. Validate the complete URL
   79 |       expect(currentUrl).toBe(expectedUrl); // Ensure the full URL matches the expected URL
   80 |
   81 |       // 9. Navigate back to the original page (since the link opened in the same tab)
   82 |       await page.goBack();
   83 |       await page.waitForLoadState('domcontentloaded'); // Ensure the page is loaded again
   84 |
   85 |       console.log(`Navigated back to the main page after clicking on "${name}".`);
   86 |     }
   87 |   });
   88 |
   89 |   test('Validate social media icon hovering and navigation', async ({ page }) => {
   90 |
   91 |     await basePage.acceptCookies.click();
   92 |
   93 |     // List of social media links with their corresponding names and expected URL patterns
   94 |     const socialLinks = [
   95 |       { name: 'Instagram', expectedUrlPattern: 'instagram.com' },
   96 |       { name: 'XProfile', expectedUrlPattern: 'x.com' }, // Update to match x.com for the new X platform
   97 |       { name: 'LinkedIn', expectedUrlPattern: 'linkedin.com' }
   98 |     ];
   99 |
  100 |     // Create an array to hold the popup pages
  101 |     let popups: any[] = [];
  102 |
  103 |     // Listen for the popups (new tabs)
  104 |     page.on('popup', (popup) => {
  105 |       console.log(`Popup opened: ${popup.url()}`); // Log popup URL for debugging
  106 |       popups.push(popup); // Add the new popup to the array
  107 |     });
  108 |
  109 |     // Iterate over each social media link to perform hover and validate the circle appearance
  110 |     for (const { name, expectedUrlPattern } of socialLinks) {
  111 |       // Get the social network icon element
  112 |       const iconLocator = basePage.openSocialMediaLink(name);
  113 |
  114 |       // 1. Hover over the social network icon
  115 |       await iconLocator.hover();
  116 |
  117 |       // 2. Wait for the hover effect to be fully applied (adjust timeout if needed)
  118 |       await page.waitForTimeout(1000);  // Wait for 1 second to allow animation to finish
  119 |
  120 |       // 3. Check for the CSS changes after hover (border-radius and border)
  121 |       const borderRadius = await iconLocator.evaluate((el: HTMLElement) => {
  122 |         return window.getComputedStyle(el).getPropertyValue('border-radius');
  123 |       });
  124 |
  125 |       const borderColor = await iconLocator.evaluate((el: HTMLElement) => {
  126 |         return window.getComputedStyle(el).getPropertyValue('border-color');
  127 |       });
  128 |
  129 |       console.log(`CSS after hover for "${name}": border-radius: ${borderRadius}, border-color: ${borderColor}`);
  130 |
  131 |       // 4. Assert that the border-radius is a large value (i.e., circular shape) and the border is visible (not transparent)
  132 |       expect(borderRadius).toBe('9999px'); // Checking for large value that indicates a circular shape
  133 |       expect(borderColor).not.toBe('transparent'); // Ensure the border has changed to something visible
  134 |
  135 |       // 5. Log success message
  136 |       console.log(`Circle appears on hover for "${name}": Border radius is ${borderRadius} and border color is ${borderColor}`);
  137 |     }
  138 |
  139 |     // Now, click the social media links to open the new tabs
  140 |     for (const { name } of socialLinks) {
  141 |       console.log(`Clicking the ${name} link to open popup.`);
  142 |       await basePage.openSocialMediaLink(name).click();
  143 |     }
  144 |
  145 |     // Wait a bit to ensure the popups open (you can increase the timeout if necessary)
  146 |     await page.waitForTimeout(5000); // Wait for 5 seconds to ensure popups have time to open
  147 |
  148 |     // Ensure the popups have been captured by checking the number of popups in the array
  149 |     expect(popups.length).toBe(3); // Ensure that 3 popups have been captured
  150 |
  151 |     // Optionally, you can log the URLs of the popups to debug
  152 |     console.log('Captured popups:', popups.map(popup => popup.url()));
  153 |
  154 |     // Ensure the URLs of the popups are correct before proceeding with the assertions
  155 |     for (let i = 0; i < popups.length; i++) {
  156 |       console.log(`Popup URL at index ${i}: ${popups[i].url()}`);
> 157 |       await expect(popups[i]).toHaveURL(new RegExp(socialLinks[i].expectedUrlPattern)); // Validate URL with the updated pattern
      |                               ^ Error: Timed out 5000ms waiting for expect(locator).toHaveURL(expected)
  158 |     }
  159 |
  160 |     // Optionally, you can also check if the popups have finished loading
  161 |     await Promise.all(popups.map(async (popup, index) => {
  162 |       try {
  163 |         console.log(`Waiting for popup URL at index ${index}: ${popup.url()}`);
  164 |         await popup.waitForLoadState('domcontentloaded', { timeout: 40000 }); // Adjust timeout
  165 |         console.log(`Popup loaded: ${popup.url()}`);
  166 |       } catch (error) {
  167 |         console.error(`Popup at index ${index} failed to load within the timeout: ${error}`);
  168 |       }
  169 |     }));
  170 |   });
  171 |
  172 |   // test('Validate text and background color for Request a pass tab on hovering', async ({ page }) => {
  173 |   //   await basePage.acceptCookies.click();
  174 |   //   const elementLocator = basePage.letsPartnerButton;  // Locate by text
  175 |   
  176 |   //   // Expected colors before and after hover
  177 |   //   const expectedTextColorBeforeHover = 'rgb(255, 255, 255)';
  178 |   //   const expectedBackgroundColorBeforeHover = 'rgba(0, 0, 0, 0)';
  179 |   //   const expectedTextColorAfterHover = 'rgb(0, 82, 125)';
  180 |   //   const expectedBackgroundColorAfterHover = 'rgb(163, 238, 255)';
  181 |   
  182 |   //   // Wait until the element is visible
  183 |   //   await elementLocator.waitFor({ state: 'visible', timeout: 10000 });
  184 |   
  185 |   //   // Check the initial state of the element (before hover)
  186 |   //   const initialTextColor = await elementLocator.evaluate((el) => {
  187 |   //     const computedStyle = window.getComputedStyle(el);
  188 |   //     return computedStyle.getPropertyValue('color');
  189 |   //   });
  190 |   //   const initialBackgroundColor = await elementLocator.evaluate((el) => {
  191 |   //     const computedStyle = window.getComputedStyle(el);
  192 |   //     return computedStyle.getPropertyValue('background-color');
  193 |   //   });
  194 |   
  195 |   //   console.log(`Initial text color: ${initialTextColor}`);
  196 |   //   console.log(`Initial background color: ${initialBackgroundColor}`);
  197 |   
  198 |   //   // Assert initial colors
  199 |   //   expect(initialTextColor).toBe(expectedTextColorBeforeHover);
  200 |   //   expect(initialBackgroundColor).toBe(expectedBackgroundColorBeforeHover);
  201 |   
  202 |   //   // Hover over the element
  203 |   //   await elementLocator.hover();
  204 |     
  205 |   //   // Wait for hover effect to settle
  206 |   //   await page.waitForTimeout(3000);
  207 |   
  208 |   //   // Check text and background color after hover
  209 |   //   const textColorAfterHover = await elementLocator.evaluate((el) => {
  210 |   //     const computedStyle = window.getComputedStyle(el);
  211 |   //     return computedStyle.getPropertyValue('color');
  212 |   //   });
  213 |   //   const backgroundColorAfterHover = await elementLocator.evaluate((el) => {
  214 |   //     const computedStyle = window.getComputedStyle(el);
  215 |   //     return computedStyle.getPropertyValue('background-color');
  216 |   //   });
  217 |   
  218 |   //   console.log(`Text color after hover: ${textColorAfterHover}`);
  219 |   //   console.log(`Background color after hover: ${backgroundColorAfterHover}`);
  220 |   
  221 |   //   // Assert the colors after hover
  222 |   //   expect(textColorAfterHover).toBe(expectedTextColorAfterHover);
  223 |   //   expect(backgroundColorAfterHover).toBe(expectedBackgroundColorAfterHover);
  224 |   
  225 |   //   console.log('Text and background colors are correct after hover');
  226 |   // });
  227 |
  228 | });
  229 |
```