# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Partner Card Test Suite >> Partner Card - Partner List Validation
- Location: /Users/gunashekar/Automation/SportsBeach/sportsbeachautomation/playwright/specs/web/sportsbeach-PartnerCard.test.ts:21:7

# Error details

```
Error: expect(received).toBe(expected) // Object.is equality

Expected: 0
Received: 21
    at /Users/gunashekar/Automation/SportsBeach/sportsbeachautomation/playwright/specs/web/sportsbeach-PartnerCard.test.ts:47:24
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 | import { POManager } from '../../pageobjects/POManager';
   3 | import * as fs from 'fs';
   4 |
   5 | test.describe('Partner Card Test Suite', () => {
   6 |
   7 |   test.beforeEach(async ({ page, baseURL }) => {
   8 |     if (typeof baseURL === 'string') {
   9 |       await page.goto(baseURL);
  10 |       // allure.label('Base URL', baseURL);
  11 |     } else {
  12 |       // allure.severity('baseURL is not defined or not a string');
  13 |       throw new Error('baseURL is not defined or not a string');
  14 |     }
  15 |   });
  16 |
  17 |   test.afterEach(async ({ page }) => {
  18 |     await page.close();
  19 |   });
  20 |
  21 |   test('Partner Card - Partner List Validation', async ({ page }) => {
  22 |     // Step 1: Load the data from the partnersList.json file
  23 |     const data = JSON.parse(fs.readFileSync('./playwright/testdata/partnersList.json', 'utf-8')).data;
  24 |
  25 |     // Step 2: Define the XPath locator for the partner card list
  26 |     const locator = '//*[@id="main-content"]/div[2]/div[4]/div/a[*]/span';
  27 |
  28 |     // Step 3: Locate the elements matching the XPath
  29 |     const elements = await page.locator(locator);
  30 |
  31 |     // Step 4: Get the inner text of each element and compare it with the data from the JSON file
  32 |     const elementCount = await elements.count();
  33 |     let matchCount = 21;  // Variable to keep track of the number of matches
  34 |
  35 |     console.log("Element Count + "+elementCount);
  36 |
  37 |     for (let i = 0; i < elementCount; i++) {
  38 |       const text = await elements.nth(i).innerText(); // Get the inner text of each element
  39 |
  40 |       // Step 5: Check if the text is present in the data list
  41 |       if (data.includes(text)) {
  42 |         matchCount++; // Increment the match count if the text is found in the list
  43 |       }
  44 |     }
  45 |
  46 |     // Step 6: Assert if the total number of matches is correct
> 47 |     expect(matchCount).toBe(elementCount); // Assert that the number of matches equals the total number of elements
     |                        ^ Error: expect(received).toBe(expected) // Object.is equality
  48 |
  49 |     // Optional: You can also assert that all the text values are found in the list
  50 |     for (let i = 0; i < elementCount; i++) {
  51 |       const text = await elements.nth(i).innerText(); // Get the inner text of each element
  52 |       expect(data).toContain(text); // Assert that the inner text is present in the list
  53 |     }
  54 |   });
  55 |
  56 | });
  57 |
```