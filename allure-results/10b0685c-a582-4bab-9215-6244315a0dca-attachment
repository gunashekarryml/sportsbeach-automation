# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Full Width Image Test Suite >> Validate Full Width Image Display
- Location: /Users/gunashekar/Automation/SportsBeach/sportsbeachautomation/playwright/specs/web/demo.test.ts:17:7

# Error details

```
Error: Timed out 5000ms waiting for expect(locator).toBeVisible()

Locator: locator('img.full-width-image')
Expected: visible
Received: <element(s) not found>
Call log:
  - expect.toBeVisible with timeout 5000ms
  - waiting for locator('img.full-width-image')

    at /Users/gunashekar/Automation/SportsBeach/sportsbeachautomation/playwright/specs/web/demo.test.ts:22:32
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 |
   3 | test.describe('Full Width Image Test Suite', () => {
   4 |
   5 |   test.beforeEach(async ({ page, baseURL }) => {
   6 |     if (typeof baseURL === 'string') {
   7 |       await page.goto(baseURL);
   8 |     } else {
   9 |       throw new Error('baseURL is not defined or not a string');
  10 |     }
  11 |   });
  12 |
  13 |   test.afterEach(async ({ page }) => {
  14 |     await page.close();
  15 |   });
  16 |
  17 |   test('Validate Full Width Image Display', async ({ page }) => {
  18 |     // Step 1: Locate the image element (You may need to adjust the selector based on your actual page structure)
  19 |     const imageLocator = page.locator('img.full-width-image'); // Example class, adjust as needed
  20 |
  21 |     // Step 2: Ensure the image is visible
> 22 |     await expect(imageLocator).toBeVisible(); // Validate the image is present on the page
     |                                ^ Error: Timed out 5000ms waiting for expect(locator).toBeVisible()
  23 |
  24 |     // Step 3: Get the image's width and the viewport width
  25 |     const imageBox = await imageLocator.boundingBox(); // Get the image's bounding box details
  26 |     const viewportSize = await page.viewportSize(); // Get the viewport size of the page
  27 |
  28 |     // Check if either the imageBox or viewportSize is null and throw an error if so
  29 |     if (!imageBox || !viewportSize) {
  30 |       throw new Error('Unable to retrieve image box or viewport size.');
  31 |     }
  32 |
  33 |     // Step 4: Validate that the image spans the full width of the screen
  34 |     expect(imageBox.width).toBeGreaterThanOrEqual(viewportSize.width - 1); // Validate the image width is nearly equal to the viewport width
  35 |
  36 |     // Step 5: Optionally check for other conditions, such as aspect ratio (if applicable)
  37 |     // For example, check if the image height is within an expected range based on the aspect ratio
  38 |     const imageHeight = imageBox.height;
  39 |     const imageWidth = imageBox.width;
  40 |     const expectedAspectRatio = 16 / 9; // Example aspect ratio
  41 |     const aspectRatio = imageWidth / imageHeight;
  42 |
  43 |     expect(Math.abs(aspectRatio - expectedAspectRatio)).toBeLessThan(0.1); // Optional: Assert that aspect ratio is approximately correct
  44 |
  45 |   });
  46 | });
  47 |
```