# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Partner Card Test Suite >> Partner Card - Validate Partner Links and Check API Status
- Location: /Users/gunashekar/Automation/SportsBeach/sportsbeachautomation/playwright/specs/web/sportsbeach-PartnerCard.test.ts:134:7

# Error details

```
Error: locator.waitFor: Target page, context or browser has been closed
Call log:
  - waiting for locator('a.partner-link').first() to be visible

    at /Users/gunashekar/Automation/SportsBeach/sportsbeachautomation/playwright/specs/web/sportsbeach-PartnerCard.test.ts:144:28
```

# Test source

```ts
   44 |     // Create objects to access the page objects
   45 |     const poManager = new POManager(page);
   46 |     const basePage = poManager.getBasePage();
   47 |     const partnersPagePage = poManager.getPartnersPage();
   48 |
   49 |     basePage.partnersLink.click();
   50 |
   51 |     // Define the XPath locator for the partner names (update to correctly target the anchor tags)
   52 |     const elements = partnersPagePage.partnerName;
   53 |
   54 |     // Wait for the elements to be visible and located
   55 |     await elements.first().waitFor({ state: 'visible' });
   56 |
   57 |     // Get the element count (number of matches)
   58 |     const elementCount = await elements.count();
   59 |
   60 |     // Ensure elements were found
   61 |     expect(elementCount).toEqual(data1); // Assert that elements are present
   62 |
   63 |     // Loop through each element to get its inner text
   64 |     for (let i = 0; i < elementCount; i++) {
   65 |       const text = await elements.nth(i).innerText(); // Get the inner text of each element
   66 |
   67 |       // Assert if the text is present in the data list
   68 |       expect(data).toContain(text); // Assert that the inner text is present in the list
   69 |     }
   70 |   });
   71 |
   72 |   // // New Test Case: Validate Partner Links and Check API Status
   73 |   // test('Partner Card - Validate Partner Links and Check API Status', async ({ page, request }) => {
   74 |   //   // Create objects to access the page objects
   75 |   //   const poManager = new POManager(page);
   76 |   //   const basePage = poManager.getBasePage();
   77 |   //   const partnersPagePage = poManager.getPartnersPage();
   78 |
   79 |   //   basePage.partnersLink.click();
   80 |
   81 |   //   // Define the XPath locator for the partner names (this should target the correct anchor tags)
   82 |   //   const elements = partnersPagePage.partnerName;
   83 |
   84 |   //   // Wait for the elements to be visible and located
   85 |   //   await elements.first().waitFor({ state: 'visible' });
   86 |
   87 |   //   // Get the element count (number of matches)
   88 |   //   const elementCount = await elements.count();
   89 |
   90 |   //   // Initialize arrays to store valid and invalid links
   91 |   //   const validLinks: string[] = [];
   92 |   //   const invalidLinks: string[] = [];
   93 |
   94 |   //   // Loop through each element to get the link and check its status
   95 |   //   for (let i = 0; i < elementCount; i++) {
   96 |   //     const element = elements.nth(i); // Get the partner at index i
   97 |   //     const link = await element.getAttribute('href'); // Capture the 'href' attribute (link)
   98 |
   99 |   //     if (link) {
  100 |   //       console.log(`Checking link: ${link}`);
  101 |
  102 |   //       // Check the link status using the API request
  103 |   //       const isValid = await checkLinkStatus(request, link);
  104 |
  105 |   //       // Store valid or invalid links based on status
  106 |   //       if (isValid) {
  107 |   //         validLinks.push(link);
  108 |   //         console.log(`Link ${link} is valid.`);
  109 |   //       } else {
  110 |   //         invalidLinks.push(link);
  111 |   //         console.error(`Link ${link} is broken or not reachable.`);
  112 |   //       }
  113 |   //     } else {
  114 |   //       console.warn(`Link at index ${i} is null or empty.`);
  115 |   //     }
  116 |   //   }
  117 |
  118 |   //   // Print the results for valid and invalid links
  119 |   //   console.log("\n--- Summary ---");
  120 |   //   console.log(`Total Valid Links: ${validLinks.length}`);
  121 |   //   validLinks.forEach((link, index) => {
  122 |   //     console.log(`Valid Link ${index + 1}: ${link}`);
  123 |   //   });
  124 |
  125 |   //   console.log(`\nTotal Invalid Links: ${invalidLinks.length}`);
  126 |   //   invalidLinks.forEach((link, index) => {
  127 |   //     console.error(`Invalid Link ${index + 1}: ${link}`);
  128 |   //   });
  129 |
  130 |   //   // Optionally, assert that no links are invalid (to ensure the page is fully working)
  131 |   //   expect(invalidLinks.length).toBe(0); // This will fail the test if there are invalid links
  132 |   // });
  133 |
  134 |   test('Partner Card - Validate Partner Links and Check API Status', async ({ page, request }) => {
  135 |     // Create objects to access the page objects
  136 |     const poManager = new POManager(page);
  137 |     const basePage = poManager.getBasePage();
  138 |     const partnersPagePage = poManager.getPartnersPage();
  139 |   
  140 |     basePage.partnersLink.click();
  141 |   
  142 |     // Wait for the partner links to be visible (adjust the selector to target the anchor elements)
  143 |     const elements = page.locator('a.partner-link'); // Adjust the selector as needed
> 144 |     await elements.first().waitFor({ state: 'visible' });
      |                            ^ Error: locator.waitFor: Target page, context or browser has been closed
  145 |   
  146 |     // Get the number of partner links
  147 |     const elementCount = await elements.count();
  148 |     console.log(`Found ${elementCount} partner links.`);
  149 |   
  150 |     // Initialize arrays to store valid and invalid links
  151 |     const validLinks = [];
  152 |     const invalidLinks = [];
  153 |   
  154 |     // Loop through each element to get the link and check its status
  155 |     for (let i = 0; i < elementCount; i++) {
  156 |       const element = elements.nth(i);
  157 |       const link = await element.getAttribute('href');
  158 |       console.log(`Link at index ${i}: ${link}`);
  159 |   
  160 |       if (link) {
  161 |         console.log(`Checking link: ${link}`);
  162 |         // Check the link status using the API request
  163 |         const isValid = await checkLinkStatus(request, link);
  164 |   
  165 |         // Store valid or invalid links based on status
  166 |         if (isValid) {
  167 |           validLinks.push(link);
  168 |           console.log(`Link ${link} is valid.`);
  169 |         } else {
  170 |           invalidLinks.push(link);
  171 |           console.error(`Link ${link} is broken or not reachable.`);
  172 |         }
  173 |       } else {
  174 |         console.warn(`Link at index ${i} is null or empty.`);
  175 |       }
  176 |     }
  177 |   
  178 |     // Print the results for valid and invalid links
  179 |     console.log("\n--- Summary ---");
  180 |     console.log(`Total Valid Links: ${validLinks.length}`);
  181 |     validLinks.forEach((link, index) => {
  182 |       console.log(`Valid Link ${index + 1}: ${link}`);
  183 |     });
  184 |   
  185 |     console.log(`\nTotal Invalid Links: ${invalidLinks.length}`);
  186 |     invalidLinks.forEach((link, index) => {
  187 |       console.error(`Invalid Link ${index + 1}: ${link}`);
  188 |     });
  189 |   
  190 |     // Assert that no links are invalid (to ensure the page is fully working)
  191 |     expect(invalidLinks).toHaveLength(0); // This will fail the test if there are invalid links
  192 |   });
  193 |   
  194 |   
  195 |
  196 |
  197 | });
  198 |
```