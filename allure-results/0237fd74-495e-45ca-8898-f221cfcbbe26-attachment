# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Partner Card Test Suite >> Validate links in global footer: URL and Status code after click, then navigate back
- Location: /Users/gunashekar/Automation/SportsBeach/sportsbeachautomation/playwright/specs/web/sportsbeach-globalFooter.test.ts:26:7

# Error details

```
Error: locator.click: Target page, context or browser has been closed
Call log:
  - waiting for locator('text=Contact Us')
    - locator resolved to <a href="https://www.cnbc.com/video/2023/10/06/why-sports-marketing-is-a-growth-area-a-stagwellas-ceo-mark-penn.html" class="flex w-full items-center justify-center p-2.5 mobile-body text-white underline-offset-4 hover:underline lg:desktop-body lg:p-0">Contact Us</a>
  - attempting click action
    - waiting for element to be visible, enabled and stable
    - element is visible, enabled and stable
    - scrolling into view if needed
    - done scrolling
    - performing click action

    at /Users/gunashekar/Automation/SportsBeach/sportsbeachautomation/playwright/specs/web/sportsbeach-globalFooter.test.ts:71:28
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 | import { POManager } from '../../pageobjects/POManager';
   3 | import { BasePage } from '../../pageobjects/BasePage';
   4 | import * as fs from 'fs';
   5 |
   6 | test.describe('Partner Card Test Suite', () => {
   7 |   
   8 |   let basePage: BasePage;
   9 |
   10 |   test.beforeEach(async ({ page, baseURL }) => {
   11 |     // Initialize the POManager and BasePage object
   12 |     const poManager = new POManager(page);
   13 |     basePage = poManager.getBasePage();
   14 |
   15 |     if (typeof baseURL === 'string') {
   16 |       await page.goto(baseURL);
   17 |     } else {
   18 |       throw new Error('baseURL is not defined or not a string');
   19 |     }
   20 |   });
   21 |
   22 |   test.afterEach(async ({ page }) => {
   23 |     await page.close();
   24 |   });
   25 |
   26 |   test('Validate links in global footer: URL and Status code after click, then navigate back', async ({ page, request }) => {
   27 |     // const poManager = new POManager(page);
   28 |     // const basePage = poManager.getBasePage();
   29 |
   30 |     await basePage.acceptCookies.click();
   31 |
   32 |     // List of links to test by their visible text and expected URL parts
   33 |     const links = [
   34 |       { name: 'Privacy Policy', expectedUrl: 'https://sportbeach-dev.vercel.app/privacy' },
   35 |       { name: 'Terms and Conditions', expectedUrl: 'https://sportbeach-dev.vercel.app/terms' },
   36 |       { name: 'Contact Us', expectedUrl: 'https://www.cnbc.com/video/2023/10/06/why-sports-marketing-is-a-growth-area-a-stagwellas-ceo-mark-penn.html' },
   37 |     ];
   38 |
   39 |     // Iterate over each link and perform the validation
   40 |     for (const { name, expectedUrl } of links) {
   41 |       const elementLocator = page.locator(`text=${name}`);
   42 |
   43 |       // 1. Check the initial state of the element (before hover)
   44 |       const initialTextDecoration = await elementLocator.evaluate((el: HTMLElement) => {
   45 |         const computedStyle = window.getComputedStyle(el);
   46 |         return computedStyle.getPropertyValue('text-decoration');
   47 |       });
   48 |       console.log(`Initial text-decoration for "${name}": ${initialTextDecoration}`);
   49 |
   50 |       // 2. Hover over the element
   51 |       await elementLocator.hover();
   52 |
   53 |       // 3. Check the text-decoration after hover
   54 |       const textDecorationAfterHover = await elementLocator.evaluate((el: HTMLElement) => {
   55 |         const computedStyle = window.getComputedStyle(el);
   56 |         return computedStyle.getPropertyValue('text-decoration');
   57 |       });
   58 |       console.log(`Text-decoration after hover for "${name}": ${textDecorationAfterHover}`);
   59 |
   60 |       // 4. Validate if the element is underlined (check if 'underline' is in the 'text-decoration' value)
   61 |       const isUnderlined = textDecorationAfterHover.includes('underline');
   62 |       expect(isUnderlined).toBe(true); // This will fail the test if not underlined
   63 |       console.log(`Is the "${name}" link underlined on hover? ${isUnderlined ? 'Yes' : 'No'}`);
   64 |
   65 |       // 5. Make an API request to check the status code before clicking the link
   66 |       const response = await request.get(expectedUrl);
   67 |       console.log(`Status code for "${name}" before click: ${response.status()}`);
   68 |       expect(response.status()).toBe(200); // Ensure the status code is 200 (OK)
   69 |
   70 |       // 6. Click on the link to navigate to the corresponding page (same tab)
>  71 |       await elementLocator.click();
      |                            ^ Error: locator.click: Target page, context or browser has been closed
   72 |
   73 |       // 7. Wait for the page to load and validate the URL
   74 |       await page.waitForURL(expectedUrl, { timeout: 10000 }); // Ensures we wait for the full URL to load
   75 |       const currentUrl = page.url();
   76 |       console.log(`URL after clicking "${name}": ${currentUrl}`);
   77 |
   78 |       // 8. Validate the complete URL
   79 |       expect(currentUrl).toBe(expectedUrl); // Ensure the full URL matches the expected URL
   80 |
   81 |       // 9. Navigate back to the original page (since the link opened in the same tab)
   82 |       await page.goBack();
   83 |       await page.waitForLoadState('domcontentloaded'); // Ensure the page is loaded again
   84 |
   85 |       console.log(`Navigated back to the main page after clicking on "${name}".`);
   86 |     }
   87 |   });
   88 |
   89 |   test('Validate social media icon hovering and navigation', async ({ page }) => {
   90 |
   91 |     await basePage.acceptCookies.click();
   92 |
   93 |     // List of social media links with their corresponding names and expected URL patterns
   94 |     const socialLinks = [
   95 |       { name: 'Instagram', expectedUrlPattern: 'instagram.com' },
   96 |       { name: 'XProfile', expectedUrlPattern: 'x.com' }, // Update to match x.com for the new X platform
   97 |       { name: 'LinkedIn', expectedUrlPattern: 'linkedin.com' }
   98 |     ];
   99 |
  100 |     // Create an array to hold the popup pages
  101 |     let popups: any[] = [];
  102 |
  103 |     // Listen for the popups (new tabs)
  104 |     page.on('popup', (popup) => {
  105 |       console.log(`Popup opened: ${popup.url()}`); // Log popup URL for debugging
  106 |       popups.push(popup); // Add the new popup to the array
  107 |     });
  108 |
  109 |     // Iterate over each social media link to perform hover and validate the circle appearance
  110 |     for (const { name, expectedUrlPattern } of socialLinks) {
  111 |       // Get the social network icon element
  112 |       const iconLocator = basePage.openSocialMediaLink(name);
  113 |
  114 |       // 1. Hover over the social network icon
  115 |       await iconLocator.hover();
  116 |
  117 |       // 2. Wait for the hover effect to be fully applied (adjust timeout if needed)
  118 |       await page.waitForTimeout(1000);  // Wait for 1 second to allow animation to finish
  119 |
  120 |       // 3. Check for the CSS changes after hover (border-radius and border)
  121 |       const borderRadius = await iconLocator.evaluate((el: HTMLElement) => {
  122 |         return window.getComputedStyle(el).getPropertyValue('border-radius');
  123 |       });
  124 |
  125 |       const borderColor = await iconLocator.evaluate((el: HTMLElement) => {
  126 |         return window.getComputedStyle(el).getPropertyValue('border-color');
  127 |       });
  128 |
  129 |       console.log(`CSS after hover for "${name}": border-radius: ${borderRadius}, border-color: ${borderColor}`);
  130 |
  131 |       // 4. Assert that the border-radius is a large value (i.e., circular shape) and the border is visible (not transparent)
  132 |       expect(borderRadius).toBe('9999px'); // Checking for large value that indicates a circular shape
  133 |       expect(borderColor).not.toBe('transparent'); // Ensure the border has changed to something visible
  134 |
  135 |       // 5. Log success message
  136 |       console.log(`Circle appears on hover for "${name}": Border radius is ${borderRadius} and border color is ${borderColor}`);
  137 |     }
  138 |
  139 |     // Now, click the social media links to open the new tabs
  140 |     for (const { name } of socialLinks) {
  141 |       console.log(`Clicking the ${name} link to open popup.`);
  142 |       await basePage.openSocialMediaLink(name).click();
  143 |     }
  144 |
  145 |     // Wait a bit to ensure the popups open (you can increase the timeout if necessary)
  146 |     await page.waitForTimeout(5000); // Wait for 5 seconds to ensure popups have time to open
  147 |
  148 |     // Ensure the popups have been captured by checking the number of popups in the array
  149 |     expect(popups.length).toBe(3); // Ensure that 3 popups have been captured
  150 |
  151 |     // Optionally, you can log the URLs of the popups to debug
  152 |     console.log('Captured popups:', popups.map(popup => popup.url()));
  153 |
  154 |     // Ensure the URLs of the popups are correct before proceeding with the assertions
  155 |     for (let i = 0; i < popups.length; i++) {
  156 |       console.log(`Popup URL at index ${i}: ${popups[i].url()}`);
  157 |       await expect(popups[i]).toHaveURL(new RegExp(socialLinks[i].expectedUrlPattern)); // Validate URL with the updated pattern
  158 |     }
  159 |
  160 |     // Optionally, you can also check if the popups have finished loading
  161 |     await Promise.all(popups.map(async (popup, index) => {
  162 |       try {
  163 |         console.log(`Waiting for popup URL at index ${index}: ${popup.url()}`);
  164 |         await popup.waitForLoadState('domcontentloaded', { timeout: 40000 }); // Adjust timeout
  165 |         console.log(`Popup loaded: ${popup.url()}`);
  166 |       } catch (error) {
  167 |         console.error(`Popup at index ${index} failed to load within the timeout: ${error}`);
  168 |       }
  169 |     }));
  170 |   });
  171 |
```