name: Playwright Tests

on:
  workflow_dispatch:
  
jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    # Step 1: Checkout the code
    - name: Checkout repository
      uses: actions/checkout@v3

    # Step 2: Set up Node.js
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18
    
    # Step 3: Install dependencies
    - name: Install dependencies
      run: npm ci

    # Step 4: Install Playwright browsers
    - name: Install Playwright browsers
      run: npx playwright install
     
      # Step 5: Cleanup old Allure data
    - name: Cleanup Allure folders
      run: |
             rm -rf ./playwright/reports/web/allure-report
             rm -rf ./playwright/reports/web/allure-results     
   
    # Step 5: Run Playwright tests
    - name: Run Playwright tests
      if: always()
      run: npm run playwright:test-web:dev:chrome
    
    - name: Install Allure Commandline
      if: always()
      run: npm install -g allure-commandline --save-dev
    
    # Step 6: Generate Allure report
    - name: Generate Allure report
      if: always()
      run: npx allure generate ./playwright/reports/web/allure-results --clean --output ./playwright/reports/web//allure-report 

    - name: List files in the Allure directory
      if: always()
      run: ls -al /home/runner/work/sportsbeach-automation/sportsbeach-automation/playwright/reports/web/allure-report/   
    
    # Step 7: Upload Allure report as an artifact
    - name: Upload Allure report
      if: always()
      uses: actions/upload-artifact@v4
      with:
          name: allure-report
          path: ./playwright/reports/web/allure-report
  host:
    runs-on: ubuntu-latest
    needs: test
    if: always()
    
    steps:
       
      - name: Checkout repository
        uses: actions/checkout@v3
       # Step 2: Set up Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
         node-version: 18
      # Step 1: Download Allure report artifact
       # Step 3: Install dependencies
      - name: Install dependencies
        run: npm ci

      - name: Download Allure report
        uses: actions/download-artifact@v4
        with:
          name: allure-report
          path: ./playwright/reports

      
      # Step 2: Deploy Allure report using GitHub Pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./playwright/reports
          publish_branch: gh-pages
          destination_dir: web
          keep_files: true

      - name: Create Allure Summary
        if: always()  
        run: |
             node create-summary.js --platform=web
        env:
          SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
          SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }}

      - name: Set email body
        id: set-email-body
        run: |
            EMAIL_BODY=$(cat email-body.txt)
            echo "email_body<<EOF" >> $GITHUB_ENV
            echo "$EMAIL_BODY" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            
      - name: Debug email body
        run: |
              echo "EMAIL_BODY=${{ env.email_body }}"  

      - name: Set Email Subject with Date
        id: set-email-subject
        run: |
                echo "email_subject=Web Automation via Playwright for Sports-Beach - $(date '+%d-%b-%Y')" >> $GITHUB_ENV
                    
      # Step 3: Send email with report link
      - name: Send email with report URL
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{secrets.EMAIL_USERNAME}}
          password: ${{secrets.EMAIL_PASSWORD}}
          subject: "${{ env.email_subject }}"
          to: ${{secrets.EMAIL_RECEPIENTS}}
          from: ${{secrets.EMAIL_USERNAME }}
          body: ${{env.email_body}}